
Oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db4  08005db4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005db4  08005db4  00015db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005dbc  08005dbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005dbc  08005dbc  00015dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000070  08005e34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08005e34  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115b1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000250e  00000000  00000000  00031651  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e20  00000000  00000000  00033b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cf8  00000000  00000000  00034980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001798d  00000000  00000000  00035678  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb9b  00000000  00000000  0004d005  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009135a  00000000  00000000  00058ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9efa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d90  00000000  00000000  000e9f78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d40 	.word	0x08005d40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005d40 	.word	0x08005d40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <triggerType>:
#include "commandExecution.h"

void triggerType(uint8_t type){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]

	//interrompo l'esecuzione
	stopSampling();
 800058a:	f000 fe25 	bl	80011d8 <stopSampling>


	//salvo il tipo di trigger in quanto e' necessario
	//per la gestione del buffer
	triggerMode = type;
 800058e:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <triggerType+0x48>)
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	7013      	strb	r3, [r2, #0]


	//se devo eseguire la modalita' auto, normal o single
	//avvio il campionamento
	if (type == 0 || type == 1 || type == 2 ){
 8000594:	79fb      	ldrb	r3, [r7, #7]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d005      	beq.n	80005a6 <triggerType+0x26>
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d002      	beq.n	80005a6 <triggerType+0x26>
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	2b02      	cmp	r3, #2
 80005a4:	d10c      	bne.n	80005c0 <triggerType+0x40>


		if (type == 0){
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d103      	bne.n	80005b4 <triggerType+0x34>

			//nel caso della modalita' auto devo essere in grado
			//di riconoscere l'assenza di trigger nella prima parte
			sampleIndex = 0;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <triggerType+0x4c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	801a      	strh	r2, [r3, #0]
 80005b2:	e003      	b.n	80005bc <triggerType+0x3c>

		} else {

			//in modalita' normal e single
			sampleIndex = 256;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <triggerType+0x4c>)
 80005b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ba:	801a      	strh	r2, [r3, #0]

		}

		startSampling();
 80005bc:	f000 fdd4 	bl	8001168 <startSampling>

	}
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200000a4 	.word	0x200000a4
 80005cc:	200005d8 	.word	0x200005d8

080005d0 <triggerLevel>:

void triggerLevel(uint8_t level){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]

	//interrompo l'esecuzione
	stopSampling();
 80005da:	f000 fdfd 	bl	80011d8 <stopSampling>

	triggerLevelValue = level;
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <triggerLevel+0x48>)
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	7013      	strb	r3, [r2, #0]

	//cambio il livello di trigger
	changeTrigger(level);
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fe06 	bl	80011f8 <changeTrigger>

	//ricomincio l'esecuzione
		if (triggerMode != 3){
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <triggerLevel+0x4c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b03      	cmp	r3, #3
 80005f2:	d00d      	beq.n	8000610 <triggerLevel+0x40>

			if (triggerMode == 0){
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <triggerLevel+0x4c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d103      	bne.n	8000604 <triggerLevel+0x34>

						//nel caso della modalita' auto devo essere in grado
						//di riconoscere l'assenza di trigger nella prima parte
						sampleIndex = 0;
 80005fc:	4b08      	ldr	r3, [pc, #32]	; (8000620 <triggerLevel+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	801a      	strh	r2, [r3, #0]
 8000602:	e003      	b.n	800060c <triggerLevel+0x3c>

					} else {

						//in modalita' normal e single
						sampleIndex = 256;
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <triggerLevel+0x50>)
 8000606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060a:	801a      	strh	r2, [r3, #0]

					}
			startSampling();
 800060c:	f000 fdac 	bl	8001168 <startSampling>
		}
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200000f0 	.word	0x200000f0
 800061c:	200000a4 	.word	0x200000a4
 8000620:	200005d8 	.word	0x200005d8

08000624 <samplingPeriod>:

void samplingPeriod(uint32_t period){
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]

	//interrompo l'esecuzione
	stopSampling();
 800062c:	f000 fdd4 	bl	80011d8 <stopSampling>

	//cambio il periodo di campionamento
	changeSamplingPeriod(period);
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 fe0d 	bl	8001250 <changeSamplingPeriod>

	//ricomincio l'esecuzione
	if (triggerMode != 3){
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <samplingPeriod+0x40>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b03      	cmp	r3, #3
 800063c:	d00d      	beq.n	800065a <samplingPeriod+0x36>

		if (triggerMode == 0){
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <samplingPeriod+0x40>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d103      	bne.n	800064e <samplingPeriod+0x2a>

					//nel caso della modalita' auto devo essere in grado
					//di riconoscere l'assenza di trigger nella prima parte
					sampleIndex = 0;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <samplingPeriod+0x44>)
 8000648:	2200      	movs	r2, #0
 800064a:	801a      	strh	r2, [r3, #0]
 800064c:	e003      	b.n	8000656 <samplingPeriod+0x32>

				} else {

					//in modalita' normal e single
					sampleIndex = 256;
 800064e:	4b06      	ldr	r3, [pc, #24]	; (8000668 <samplingPeriod+0x44>)
 8000650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000654:	801a      	strh	r2, [r3, #0]

				}
		startSampling();
 8000656:	f000 fd87 	bl	8001168 <startSampling>
	}
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000a4 	.word	0x200000a4
 8000668:	200005d8 	.word	0x200005d8

0800066c <resetCommand>:
#include "commandManagement.h"

void resetCommand(char* command, uint8_t length){
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]

	for(int i = 0; i <= length; i++){
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	e007      	b.n	800068e <resetCommand+0x22>

		command[i] = '\0';
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i <= length; i++){
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3301      	adds	r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	429a      	cmp	r2, r3
 8000694:	ddf3      	ble.n	800067e <resetCommand+0x12>
	}


}
 8000696:	bf00      	nop
 8000698:	3714      	adds	r7, #20
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr

080006a2 <analyzeCommand>:


void analyzeCommand(char* command, uint8_t length){
 80006a2:	b580      	push	{r7, lr}
 80006a4:	b082      	sub	sp, #8
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	70fb      	strb	r3, [r7, #3]

	if (length == 6) {
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d123      	bne.n	80006fc <analyzeCommand+0x5a>

		if (command[1] == 'T') {
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3301      	adds	r3, #1
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b54      	cmp	r3, #84	; 0x54
 80006bc:	d134      	bne.n	8000728 <analyzeCommand+0x86>

			if (command[2] == 'T') {
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3302      	adds	r3, #2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b54      	cmp	r3, #84	; 0x54
 80006c6:	d109      	bne.n	80006dc <analyzeCommand+0x3a>

						//eseguo comando Trigger Type
						triggerType(obtainCommandValue(command, 3, 4));
 80006c8:	2204      	movs	r2, #4
 80006ca:	2103      	movs	r1, #3
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f82f 	bl	8000730 <obtainCommandValue>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff52 	bl	8000580 <triggerType>
					}

			if (command[2] == 'L') {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3302      	adds	r3, #2
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b4c      	cmp	r3, #76	; 0x4c
 80006e4:	d120      	bne.n	8000728 <analyzeCommand+0x86>

						//eseguo comando Trigger Level
						triggerLevel(obtainCommandValue(command, 3, 4));
 80006e6:	2204      	movs	r2, #4
 80006e8:	2103      	movs	r1, #3
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f820 	bl	8000730 <obtainCommandValue>
 80006f0:	4603      	mov	r3, r0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff6b 	bl	80005d0 <triggerLevel>

			//eseguo comando Sampling Period
			samplingPeriod(obtainCommandValue(command, 3, 10));
		}
	}
}
 80006fa:	e015      	b.n	8000728 <analyzeCommand+0x86>
	} else if (length == 12) {
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	2b0c      	cmp	r3, #12
 8000700:	d112      	bne.n	8000728 <analyzeCommand+0x86>
		if (command[1] == 'S' && command[2] == 'P') {
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3301      	adds	r3, #1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b53      	cmp	r3, #83	; 0x53
 800070a:	d10d      	bne.n	8000728 <analyzeCommand+0x86>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	3302      	adds	r3, #2
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b50      	cmp	r3, #80	; 0x50
 8000714:	d108      	bne.n	8000728 <analyzeCommand+0x86>
			samplingPeriod(obtainCommandValue(command, 3, 10));
 8000716:	220a      	movs	r2, #10
 8000718:	2103      	movs	r1, #3
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f000 f808 	bl	8000730 <obtainCommandValue>
 8000720:	4603      	mov	r3, r0
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff7e 	bl	8000624 <samplingPeriod>
}
 8000728:	bf00      	nop
 800072a:	3708      	adds	r7, #8
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}

08000730 <obtainCommandValue>:

uint32_t obtainCommandValue(char* command, uint8_t posIn, uint8_t posFin){
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
 800073c:	4613      	mov	r3, r2
 800073e:	70bb      	strb	r3, [r7, #2]

	uint32_t result = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	60fb      	str	r3, [r7, #12]

	for(int i = posIn; i <= posFin; i++){
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	e011      	b.n	800076e <obtainCommandValue+0x3e>

		result <<= 4;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	60fb      	str	r3, [r7, #12]
		result += hexToInt(command[i]);
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	687a      	ldr	r2, [r7, #4]
 8000754:	4413      	add	r3, r2
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f000 f811 	bl	8000780 <hexToInt>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	4413      	add	r3, r2
 8000766:	60fb      	str	r3, [r7, #12]
	for(int i = posIn; i <= posFin; i++){
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	3301      	adds	r3, #1
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	78bb      	ldrb	r3, [r7, #2]
 8000770:	68ba      	ldr	r2, [r7, #8]
 8000772:	429a      	cmp	r2, r3
 8000774:	dde9      	ble.n	800074a <obtainCommandValue+0x1a>
	}
	return result;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <hexToInt>:

uint8_t hexToInt(char hex)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
    if (hex >= '0' && hex <= '9')
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b2f      	cmp	r3, #47	; 0x2f
 800078e:	d906      	bls.n	800079e <hexToInt+0x1e>
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	2b39      	cmp	r3, #57	; 0x39
 8000794:	d803      	bhi.n	800079e <hexToInt+0x1e>
        return hex - 48;
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	3b30      	subs	r3, #48	; 0x30
 800079a:	b2db      	uxtb	r3, r3
 800079c:	e014      	b.n	80007c8 <hexToInt+0x48>
    if (hex >= 'A' && hex <= 'F')
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b40      	cmp	r3, #64	; 0x40
 80007a2:	d906      	bls.n	80007b2 <hexToInt+0x32>
 80007a4:	79fb      	ldrb	r3, [r7, #7]
 80007a6:	2b46      	cmp	r3, #70	; 0x46
 80007a8:	d803      	bhi.n	80007b2 <hexToInt+0x32>
        return hex - 'A' + 10;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	3b37      	subs	r3, #55	; 0x37
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	e00a      	b.n	80007c8 <hexToInt+0x48>
    if (hex >= 'a' && hex <= 'f')
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b60      	cmp	r3, #96	; 0x60
 80007b6:	d906      	bls.n	80007c6 <hexToInt+0x46>
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2b66      	cmp	r3, #102	; 0x66
 80007bc:	d803      	bhi.n	80007c6 <hexToInt+0x46>
        return hex - 'a' + 10;
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	3b57      	subs	r3, #87	; 0x57
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	e000      	b.n	80007c8 <hexToInt+0x48>
    return 0;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr

080007d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f000 fde2 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f81a 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f000 f9c2 	bl	8000b68 <MX_GPIO_Init>
  MX_DMA_Init();
 80007e4:	f000 f9a0 	bl	8000b28 <MX_DMA_Init>
  MX_ADC1_Init();
 80007e8:	f000 f87e 	bl	80008e8 <MX_ADC1_Init>
  MX_TIM2_Init();
 80007ec:	f000 f8fe 	bl	80009ec <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007f0:	f000 f970 	bl	8000ad4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  triggerMode = 3;
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <main+0x34>)
 80007f6:	2203      	movs	r2, #3
 80007f8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2,(uint8_t*)&receivedChar, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	4903      	ldr	r1, [pc, #12]	; (800080c <main+0x38>)
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <main+0x3c>)
 8000800:	f004 f814 	bl	800482c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000804:	e7fe      	b.n	8000804 <main+0x30>
 8000806:	bf00      	nop
 8000808:	200000a4 	.word	0x200000a4
 800080c:	200005e8 	.word	0x200005e8
 8000810:	20000598 	.word	0x20000598

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 0320 	add.w	r3, r7, #32
 800081e:	2230      	movs	r2, #48	; 0x30
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f004 fe7e 	bl	8005524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]
 800083c:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <SystemClock_Config+0xcc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a27      	ldr	r2, [pc, #156]	; (80008e0 <SystemClock_Config+0xcc>)
 8000842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <SystemClock_Config+0xcc>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000854:	2300      	movs	r3, #0
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	4b22      	ldr	r3, [pc, #136]	; (80008e4 <SystemClock_Config+0xd0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000860:	4a20      	ldr	r2, [pc, #128]	; (80008e4 <SystemClock_Config+0xd0>)
 8000862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b1e      	ldr	r3, [pc, #120]	; (80008e4 <SystemClock_Config+0xd0>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	2310      	movs	r3, #16
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000888:	2308      	movs	r3, #8
 800088a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800088c:	2350      	movs	r3, #80	; 0x50
 800088e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000890:	2302      	movs	r3, #2
 8000892:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000894:	2304      	movs	r3, #4
 8000896:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000898:	f107 0320 	add.w	r3, r7, #32
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fba7 	bl	8002ff0 <HAL_RCC_OscConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008a8:	f000 fa4c 	bl	8000d44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ac:	230f      	movs	r3, #15
 80008ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b0:	2302      	movs	r3, #2
 80008b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2102      	movs	r1, #2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fe01 	bl	80034d0 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008d4:	f000 fa36 	bl	8000d44 <Error_Handler>
  }
}
 80008d8:	bf00      	nop
 80008da:	3750      	adds	r7, #80	; 0x50
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40007000 	.word	0x40007000

080008e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80008ee:	f107 0310 	add.w	r3, r7, #16
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
 80008fe:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000900:	463b      	mov	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800090c:	4b34      	ldr	r3, [pc, #208]	; (80009e0 <MX_ADC1_Init+0xf8>)
 800090e:	4a35      	ldr	r2, [pc, #212]	; (80009e4 <MX_ADC1_Init+0xfc>)
 8000910:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000912:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <MX_ADC1_Init+0xf8>)
 8000914:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000918:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800091a:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <MX_ADC1_Init+0xf8>)
 800091c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000920:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000922:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <MX_ADC1_Init+0xf8>)
 8000924:	2201      	movs	r2, #1
 8000926:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000928:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <MX_ADC1_Init+0xf8>)
 800092a:	2200      	movs	r2, #0
 800092c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800092e:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_ADC1_Init+0xf8>)
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <MX_ADC1_Init+0xf8>)
 8000938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800093c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_ADC1_Init+0xf8>)
 8000940:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000944:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000946:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_ADC1_Init+0xf8>)
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800094c:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <MX_ADC1_Init+0xf8>)
 800094e:	2202      	movs	r2, #2
 8000950:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_ADC1_Init+0xf8>)
 8000954:	2201      	movs	r2, #1
 8000956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800095a:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <MX_ADC1_Init+0xf8>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000960:	481f      	ldr	r0, [pc, #124]	; (80009e0 <MX_ADC1_Init+0xf8>)
 8000962:	f000 fd8f 	bl	8001484 <HAL_ADC_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800096c:	f000 f9ea 	bl	8000d44 <Error_Handler>
  }
  /** Configure the analog watchdog
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000970:	4b1d      	ldr	r3, [pc, #116]	; (80009e8 <MX_ADC1_Init+0x100>)
 8000972:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 127;
 8000974:	237f      	movs	r3, #127	; 0x7f
 8000976:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = ENABLE;
 8000980:	2301      	movs	r3, #1
 8000982:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000986:	f107 0310 	add.w	r3, r7, #16
 800098a:	4619      	mov	r1, r3
 800098c:	4814      	ldr	r0, [pc, #80]	; (80009e0 <MX_ADC1_Init+0xf8>)
 800098e:	f001 fab3 	bl	8001ef8 <HAL_ADC_AnalogWDGConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000998:	f000 f9d4 	bl	8000d44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800099c:	2300      	movs	r3, #0
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_ADC1_Init+0xf8>)
 80009ae:	f001 f981 	bl	8001cb4 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 80009b8:	f000 f9c4 	bl	8000d44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009bc:	2301      	movs	r3, #1
 80009be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_ADC1_Init+0xf8>)
 80009ca:	f001 f973 	bl	8001cb4 <HAL_ADC_ConfigChannel>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 80009d4:	f000 f9b6 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000a8 	.word	0x200000a8
 80009e4:	40012000 	.word	0x40012000
 80009e8:	00800200 	.word	0x00800200

080009ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	; 0x38
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a00:	f107 0320 	add.w	r3, r7, #32
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
 8000a18:	615a      	str	r2, [r3, #20]
 8000a1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <MX_TIM2_Init+0xe0>)
 8000a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <MX_TIM2_Init+0xe0>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_TIM2_Init+0xe0>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7999999;
 8000a30:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_TIM2_Init+0xe0>)
 8000a32:	4a27      	ldr	r2, [pc, #156]	; (8000ad0 <MX_TIM2_Init+0xe4>)
 8000a34:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <MX_TIM2_Init+0xe0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <MX_TIM2_Init+0xe0>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a42:	4822      	ldr	r0, [pc, #136]	; (8000acc <MX_TIM2_Init+0xe0>)
 8000a44:	f002 ff10 	bl	8003868 <HAL_TIM_Base_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000a4e:	f000 f979 	bl	8000d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	481b      	ldr	r0, [pc, #108]	; (8000acc <MX_TIM2_Init+0xe0>)
 8000a60:	f003 f9d0 	bl	8003e04 <HAL_TIM_ConfigClockSource>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a6a:	f000 f96b 	bl	8000d44 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000a6e:	4817      	ldr	r0, [pc, #92]	; (8000acc <MX_TIM2_Init+0xe0>)
 8000a70:	f002 ff25 	bl	80038be <HAL_TIM_OC_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a7a:	f000 f963 	bl	8000d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a7e:	2320      	movs	r3, #32
 8000a80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480f      	ldr	r0, [pc, #60]	; (8000acc <MX_TIM2_Init+0xe0>)
 8000a8e:	f003 fd65 	bl	800455c <HAL_TIMEx_MasterConfigSynchronization>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a98:	f000 f954 	bl	8000d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <MX_TIM2_Init+0xe0>)
 8000ab4:	f003 f946 	bl	8003d44 <HAL_TIM_OC_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000abe:	f000 f941 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac2:	bf00      	nop
 8000ac4:	3738      	adds	r7, #56	; 0x38
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000558 	.word	0x20000558
 8000ad0:	007a11ff 	.word	0x007a11ff

08000ad4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MX_USART2_UART_Init+0x50>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b06:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b0a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	f003 fda7 	bl	8004660 <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000b18:	f000 f914 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000598 	.word	0x20000598
 8000b24:	40004400 	.word	0x40004400

08000b28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_DMA_Init+0x3c>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <MX_DMA_Init+0x3c>)
 8000b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_DMA_Init+0x3c>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	2038      	movs	r0, #56	; 0x38
 8000b50:	f001 fc95 	bl	800247e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b54:	2038      	movs	r0, #56	; 0x38
 8000b56:	f001 fcae 	bl	80024b6 <HAL_NVIC_EnableIRQ>

}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023800 	.word	0x40023800

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_GPIO_Init+0x30>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <MX_GPIO_Init+0x30>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_GPIO_Init+0x30>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800

08000b9c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]


	//HAL_UART_Transmit_IT(&huart2,(uint8_t*)&receivedChar,1);
	//se ricevo il prompt * resetto il comando ricevuto
	if (receivedChar == '*'){
 8000ba4:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <HAL_UART_RxCpltCallback+0x7c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8000baa:	d108      	bne.n	8000bbe <HAL_UART_RxCpltCallback+0x22>

		resetCommand(receivedCommand, commandLength);
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <HAL_UART_RxCpltCallback+0x80>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481b      	ldr	r0, [pc, #108]	; (8000c20 <HAL_UART_RxCpltCallback+0x84>)
 8000bb4:	f7ff fd5a 	bl	800066c <resetCommand>
		commandLength = 0;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <HAL_UART_RxCpltCallback+0x80>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
	}
	//inserisco questo controllo per evitare segmentation fault
	//nel caso venga scritto un comando piu' lungo del dovuto
	if (commandLength < 12) {
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_UART_RxCpltCallback+0x80>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b0b      	cmp	r3, #11
 8000bc4:	d80c      	bhi.n	8000be0 <HAL_UART_RxCpltCallback+0x44>
		//aggiungo il carattere ricevuto alla stringa di comando
		receivedCommand[commandLength] = receivedChar;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_UART_RxCpltCallback+0x80>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_UART_RxCpltCallback+0x7c>)
 8000bce:	7819      	ldrb	r1, [r3, #0]
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <HAL_UART_RxCpltCallback+0x84>)
 8000bd2:	5499      	strb	r1, [r3, r2]
		commandLength ++;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <HAL_UART_RxCpltCallback+0x80>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	b2da      	uxtb	r2, r3
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_UART_RxCpltCallback+0x80>)
 8000bde:	701a      	strb	r2, [r3, #0]
	}
	if (receivedChar == '#'){
 8000be0:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_UART_RxCpltCallback+0x7c>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b23      	cmp	r3, #35	; 0x23
 8000be6:	d10e      	bne.n	8000c06 <HAL_UART_RxCpltCallback+0x6a>

		analyzeCommand(receivedCommand, commandLength);
 8000be8:	4b0c      	ldr	r3, [pc, #48]	; (8000c1c <HAL_UART_RxCpltCallback+0x80>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	480c      	ldr	r0, [pc, #48]	; (8000c20 <HAL_UART_RxCpltCallback+0x84>)
 8000bf0:	f7ff fd57 	bl	80006a2 <analyzeCommand>
		resetCommand(receivedCommand, commandLength);
 8000bf4:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_UART_RxCpltCallback+0x80>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4809      	ldr	r0, [pc, #36]	; (8000c20 <HAL_UART_RxCpltCallback+0x84>)
 8000bfc:	f7ff fd36 	bl	800066c <resetCommand>
		commandLength = 0;
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_UART_RxCpltCallback+0x80>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2,(uint8_t*)&receivedChar, 1);//cambiato
 8000c06:	2201      	movs	r2, #1
 8000c08:	4903      	ldr	r1, [pc, #12]	; (8000c18 <HAL_UART_RxCpltCallback+0x7c>)
 8000c0a:	4806      	ldr	r0, [pc, #24]	; (8000c24 <HAL_UART_RxCpltCallback+0x88>)
 8000c0c:	f003 fe0e 	bl	800482c <HAL_UART_Receive_IT>

}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	200005e8 	.word	0x200005e8
 8000c1c:	200005dc 	.word	0x200005dc
 8000c20:	2000008c 	.word	0x2000008c
 8000c24:	20000598 	.word	0x20000598

08000c28 <HAL_TIM_OC_DelayElapsedCallback>:



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]



	if (triggerFound == 0){
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d122      	bne.n	8000c80 <HAL_TIM_OC_DelayElapsedCallback+0x58>

		buffer[255][0] = samples[0];
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8000c42:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
		buffer[255][1] = samples[1];
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8000c4e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff


		bufferShift();
 8000c52:	f000 fa5f 	bl	8001114 <bufferShift>

		if (triggerMode == 0){
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <HAL_TIM_OC_DelayElapsedCallback+0xb4>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d12c      	bne.n	8000cb8 <HAL_TIM_OC_DelayElapsedCallback+0x90>

			if (sampleIndex == 256){
 8000c5e:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c68:	d102      	bne.n	8000c70 <HAL_TIM_OC_DelayElapsedCallback+0x48>

				triggerFound = 1;
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	701a      	strb	r2, [r3, #0]

			}
			sampleIndex ++;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	3301      	adds	r3, #1
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000c7c:	801a      	strh	r2, [r3, #0]
 8000c7e:	e01b      	b.n	8000cb8 <HAL_TIM_OC_DelayElapsedCallback+0x90>

		}

	} else {

		buffer[sampleIndex][0] = samples[0];
 8000c80:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000c82:	6819      	ldr	r1, [r3, #0]
 8000c84:	4b16      	ldr	r3, [pc, #88]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	b2c9      	uxtb	r1, r1
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8000c90:	f803 1012 	strb.w	r1, [r3, r2, lsl #1]
		buffer[sampleIndex][1] = samples[1];
 8000c94:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_TIM_OC_DelayElapsedCallback+0xac>)
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	b2d1      	uxtb	r1, r2
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_TIM_OC_DelayElapsedCallback+0xb0>)
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4413      	add	r3, r2
 8000ca6:	460a      	mov	r2, r1
 8000ca8:	705a      	strb	r2, [r3, #1]

		sampleIndex ++;
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000cb6:	801a      	strh	r2, [r3, #0]
	}

	if (sampleIndex == 512){
 8000cb8:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <HAL_TIM_OC_DelayElapsedCallback+0xb8>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cc2:	d101      	bne.n	8000cc8 <HAL_TIM_OC_DelayElapsedCallback+0xa0>

		samplesTransmission();
 8000cc4:	f000 fae2 	bl	800128c <samplesTransmission>

	}
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000a5 	.word	0x200000a5
 8000cd4:	200005e0 	.word	0x200005e0
 8000cd8:	200000f4 	.word	0x200000f4
 8000cdc:	200000a4 	.word	0x200000a4
 8000ce0:	200005d8 	.word	0x200005d8

08000ce4 <HAL_ADC_LevelOutOfWindowCallback>:

void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]


		triggerFound = 1;
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_ADC_LevelOutOfWindowCallback+0x50>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]

		if (triggerMode == 0){
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_ADC_LevelOutOfWindowCallback+0x54>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d103      	bne.n	8000d02 <HAL_ADC_LevelOutOfWindowCallback+0x1e>

			sampleIndex = 256;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <HAL_ADC_LevelOutOfWindowCallback+0x58>)
 8000cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d00:	801a      	strh	r2, [r3, #0]
		}

		//disabilito l'analog watchdog
	  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	615a      	str	r2, [r3, #20]
	  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4809      	ldr	r0, [pc, #36]	; (8000d40 <HAL_ADC_LevelOutOfWindowCallback+0x5c>)
 8000d1c:	f001 f8ec 	bl	8001ef8 <HAL_ADC_AnalogWDGConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_ADC_LevelOutOfWindowCallback+0x46>
	  	  {
	  	    Error_Handler();
 8000d26:	f000 f80d 	bl	8000d44 <Error_Handler>
	  	  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3720      	adds	r7, #32
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200000a5 	.word	0x200000a5
 8000d38:	200000a4 	.word	0x200000a4
 8000d3c:	200005d8 	.word	0x200005d8
 8000d40:	200000a8 	.word	0x200000a8

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
	...

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x4c>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a33      	ldr	r2, [pc, #204]	; (8000e90 <HAL_ADC_MspInit+0xec>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d15f      	bne.n	8000e86 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b32      	ldr	r3, [pc, #200]	; (8000e94 <HAL_ADC_MspInit+0xf0>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a31      	ldr	r2, [pc, #196]	; (8000e94 <HAL_ADC_MspInit+0xf0>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	; (8000e94 <HAL_ADC_MspInit+0xf0>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <HAL_ADC_MspInit+0xf0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a2a      	ldr	r2, [pc, #168]	; (8000e94 <HAL_ADC_MspInit+0xf0>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <HAL_ADC_MspInit+0xf0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e02:	2303      	movs	r3, #3
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4821      	ldr	r0, [pc, #132]	; (8000e98 <HAL_ADC_MspInit+0xf4>)
 8000e12:	f001 ff6b 	bl	8002cec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e18:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <HAL_ADC_MspInit+0xfc>)
 8000e1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e2e:	4b1b      	ldr	r3, [pc, #108]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e3e:	4b17      	ldr	r3, [pc, #92]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e5a:	4810      	ldr	r0, [pc, #64]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e5c:	f001 fb46 	bl	80024ec <HAL_DMA_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e66:	f7ff ff6d 	bl	8000d44 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e6e:	639a      	str	r2, [r3, #56]	; 0x38
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_ADC_MspInit+0xf8>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2101      	movs	r1, #1
 8000e7a:	2012      	movs	r0, #18
 8000e7c:	f001 faff 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000e80:	2012      	movs	r0, #18
 8000e82:	f001 fb18 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40012000 	.word	0x40012000
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	200004f8 	.word	0x200004f8
 8000ea0:	40026410 	.word	0x40026410

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb4:	d115      	bne.n	8000ee2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <HAL_TIM_Base_MspInit+0x48>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <HAL_TIM_Base_MspInit+0x48>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_TIM_Base_MspInit+0x48>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	201c      	movs	r0, #28
 8000ed8:	f001 fad1 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000edc:	201c      	movs	r0, #28
 8000ede:	f001 faea 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	; 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1d      	ldr	r2, [pc, #116]	; (8000f84 <HAL_UART_MspInit+0x94>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d133      	bne.n	8000f7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_UART_MspInit+0x98>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_UART_MspInit+0x98>)
 8000f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f20:	6413      	str	r3, [r2, #64]	; 0x40
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_UART_MspInit+0x98>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_UART_MspInit+0x98>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a14      	ldr	r2, [pc, #80]	; (8000f88 <HAL_UART_MspInit+0x98>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_UART_MspInit+0x98>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f4a:	230c      	movs	r3, #12
 8000f4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f56:	2303      	movs	r3, #3
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <HAL_UART_MspInit+0x9c>)
 8000f66:	f001 fec1 	bl	8002cec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2026      	movs	r0, #38	; 0x26
 8000f70:	f001 fa85 	bl	800247e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f74:	2026      	movs	r0, #38	; 0x26
 8000f76:	f001 fa9e 	bl	80024b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40004400 	.word	0x40004400
 8000f88:	40023800 	.word	0x40023800
 8000f8c:	40020000 	.word	0x40020000

08000f90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 fa2e 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <ADC_IRQHandler+0x10>)
 8000ff2:	f000 fbe1 	bl	80017b8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000a8 	.word	0x200000a8

08001000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <TIM2_IRQHandler+0x10>)
 8001006:	f002 fd95 	bl	8003b34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000558 	.word	0x20000558

08001014 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <USART2_IRQHandler+0x10>)
 800101a:	f003 fc5d 	bl	80048d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000598 	.word	0x20000598

08001028 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <DMA2_Stream0_IRQHandler+0x10>)
 800102e:	f001 fbf5 	bl	800281c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200004f8 	.word	0x200004f8

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	; (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	; (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f004 fa30 	bl	80054d0 <__errno>
 8001070:	4602      	mov	r2, r0
 8001072:	230c      	movs	r3, #12
 8001074:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20018000 	.word	0x20018000
 800109c:	00000400 	.word	0x00000400
 80010a0:	20000098 	.word	0x20000098
 80010a4:	200005f8 	.word	0x200005f8

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <SystemInit+0x28>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <SystemInit+0x28>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SystemInit+0x28>)
 80010be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c2:	609a      	str	r2, [r3, #8]
#endif
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <bufferReset>:
#include "utilities.h"

void bufferReset(){
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0

	//resetto tutto il buffer
	for(int i = 0; i < 511; i ++){
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	e00d      	b.n	80010fc <bufferReset+0x28>

			buffer[i][0] = 0;
 80010e0:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <bufferReset+0x3c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2100      	movs	r1, #0
 80010e6:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
			buffer[i][1] = 0;
 80010ea:	4a09      	ldr	r2, [pc, #36]	; (8001110 <bufferReset+0x3c>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	4413      	add	r3, r2
 80010f2:	2200      	movs	r2, #0
 80010f4:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < 511; i ++){
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3301      	adds	r3, #1
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8001102:	dded      	ble.n	80010e0 <bufferReset+0xc>
		}
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	200000f4 	.word	0x200000f4

08001114 <bufferShift>:

void bufferShift(){
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0

	//eseguo lo shift a sinistra dei primi 256 campioni nel buffer
	//di fatto la prima meta' del buffer viene usata come fifo
	for(int i = 0; i < 255; i++){
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	e017      	b.n	8001150 <bufferShift+0x3c>

		buffer[i][0] = buffer[i+1][0];
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3301      	adds	r3, #1
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <bufferShift+0x50>)
 8001126:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <bufferShift+0x50>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		buffer[i][1] = buffer[i+1][1];
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3301      	adds	r3, #1
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <bufferShift+0x50>)
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	7859      	ldrb	r1, [r3, #1]
 800113e:	4a09      	ldr	r2, [pc, #36]	; (8001164 <bufferShift+0x50>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4413      	add	r3, r2
 8001146:	460a      	mov	r2, r1
 8001148:	705a      	strb	r2, [r3, #1]
	for(int i = 0; i < 255; i++){
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3301      	adds	r3, #1
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2bfe      	cmp	r3, #254	; 0xfe
 8001154:	dde4      	ble.n	8001120 <bufferShift+0xc>
	}
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200000f4 	.word	0x200000f4

08001168 <startSampling>:

void startSampling(){
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

	//avvio il timer che scandisce l'acquisizione dei campioni
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800116c:	2100      	movs	r1, #0
 800116e:	4813      	ldr	r0, [pc, #76]	; (80011bc <startSampling+0x54>)
 8001170:	f002 fbda 	bl	8003928 <HAL_TIM_OC_Start_IT>
	//HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
	//abilito il dma per l'adc
	changeTrigger(triggerLevelValue);
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <startSampling+0x58>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f000 f83c 	bl	80011f8 <changeTrigger>
	HAL_ADC_Start_DMA(&hadc1, samples, 2);
 8001180:	2202      	movs	r2, #2
 8001182:	4910      	ldr	r1, [pc, #64]	; (80011c4 <startSampling+0x5c>)
 8001184:	4810      	ldr	r0, [pc, #64]	; (80011c8 <startSampling+0x60>)
 8001186:	f000 fc59 	bl	8001a3c <HAL_ADC_Start_DMA>
	//avvio l'adc
	HAL_ADC_Start(&hadc1);
 800118a:	480f      	ldr	r0, [pc, #60]	; (80011c8 <startSampling+0x60>)
 800118c:	f000 f9be 	bl	800150c <HAL_ADC_Start>
	HAL_ADC_Start_IT(&hadc1);
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <startSampling+0x60>)
 8001192:	f000 fa61 	bl	8001658 <HAL_ADC_Start_IT>
	//resetto il flag del trigger
	triggerFound = 0;
 8001196:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <startSampling+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	bufferReset();
 800119c:	f7ff ff9a 	bl	80010d4 <bufferReset>

	if (triggerMode == 0){
 80011a0:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <startSampling+0x68>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d103      	bne.n	80011b0 <startSampling+0x48>

			sampleIndex = 0;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <startSampling+0x6c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	801a      	strh	r2, [r3, #0]
		} else {

			sampleIndex = 256;
		}

}
 80011ae:	e003      	b.n	80011b8 <startSampling+0x50>
			sampleIndex = 256;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <startSampling+0x6c>)
 80011b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b6:	801a      	strh	r2, [r3, #0]
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000558 	.word	0x20000558
 80011c0:	200000f0 	.word	0x200000f0
 80011c4:	200005e0 	.word	0x200005e0
 80011c8:	200000a8 	.word	0x200000a8
 80011cc:	200000a5 	.word	0x200000a5
 80011d0:	200000a4 	.word	0x200000a4
 80011d4:	200005d8 	.word	0x200005d8

080011d8 <stopSampling>:

void stopSampling(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

	//fermo il timer
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 80011dc:	2100      	movs	r1, #0
 80011de:	4804      	ldr	r0, [pc, #16]	; (80011f0 <stopSampling+0x18>)
 80011e0:	f002 fc1a 	bl	8003a18 <HAL_TIM_OC_Stop_IT>
	//disabilito il dma per l'adc
	HAL_ADC_Stop_DMA(&hadc1);
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <stopSampling+0x1c>)
 80011e6:	f000 fcfd 	bl	8001be4 <HAL_ADC_Stop_DMA>


}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000558 	.word	0x20000558
 80011f4:	200000a8 	.word	0x200000a8

080011f8 <changeTrigger>:

void changeTrigger(uint8_t level){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]

	  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001202:	f107 0308 	add.w	r3, r7, #8
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
 8001212:	615a      	str	r2, [r3, #20]
	  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <changeTrigger+0x50>)
 8001216:	60bb      	str	r3, [r7, #8]
	  AnalogWDGConfig.HighThreshold = level;
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	60fb      	str	r3, [r7, #12]
	  AnalogWDGConfig.LowThreshold = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
	  AnalogWDGConfig.Channel = ADC_CHANNEL_0;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
	  AnalogWDGConfig.ITMode = ENABLE;
 8001224:	2301      	movs	r3, #1
 8001226:	763b      	strb	r3, [r7, #24]
	  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	4619      	mov	r1, r3
 800122e:	4807      	ldr	r0, [pc, #28]	; (800124c <changeTrigger+0x54>)
 8001230:	f000 fe62 	bl	8001ef8 <HAL_ADC_AnalogWDGConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <changeTrigger+0x46>
	  {
	    Error_Handler();
 800123a:	f7ff fd83 	bl	8000d44 <Error_Handler>
	  }
}
 800123e:	bf00      	nop
 8001240:	3720      	adds	r7, #32
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	00800200 	.word	0x00800200
 800124c:	200000a8 	.word	0x200000a8

08001250 <changeSamplingPeriod>:

void changeSamplingPeriod(uint32_t period){
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

	uint32_t steps;
	steps = ((period * 2) / 25 )-1;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	4a09      	ldr	r2, [pc, #36]	; (8001284 <changeSamplingPeriod+0x34>)
 800125e:	fba2 2303 	umull	r2, r3, r2, r3
 8001262:	08db      	lsrs	r3, r3, #3
 8001264:	3b01      	subs	r3, #1
 8001266:	60fb      	str	r3, [r7, #12]

	__HAL_TIM_SET_AUTORELOAD(&htim2,steps);
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <changeSamplingPeriod+0x38>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001270:	4a05      	ldr	r2, [pc, #20]	; (8001288 <changeSamplingPeriod+0x38>)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	60d3      	str	r3, [r2, #12]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	51eb851f 	.word	0x51eb851f
 8001288:	20000558 	.word	0x20000558

0800128c <samplesTransmission>:

void samplesTransmission(){
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0

	char begin = '*', end = '#';
 8001292:	232a      	movs	r3, #42	; 0x2a
 8001294:	72fb      	strb	r3, [r7, #11]
 8001296:	2323      	movs	r3, #35	; 0x23
 8001298:	72bb      	strb	r3, [r7, #10]
	char s1[3],s2[3];

	//fermo il campionamento
	stopSampling();
 800129a:	f7ff ff9d 	bl	80011d8 <stopSampling>

	HAL_UART_Transmit(&huart2,(uint8_t*)&begin,1,1000);
 800129e:	f107 010b 	add.w	r1, r7, #11
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	2201      	movs	r2, #1
 80012a8:	4824      	ldr	r0, [pc, #144]	; (800133c <samplesTransmission+0xb0>)
 80012aa:	f003 fa26 	bl	80046fa <HAL_UART_Transmit>

	for(int i = 0; i < 512; i++){
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	e025      	b.n	8001300 <samplesTransmission+0x74>


		sprintf(s1,"%02x",buffer[i][0]);
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <samplesTransmission+0xb4>)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80012bc:	461a      	mov	r2, r3
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	4920      	ldr	r1, [pc, #128]	; (8001344 <samplesTransmission+0xb8>)
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 f936 	bl	8005534 <siprintf>
		sprintf(s2,"%02x",buffer[i][1]);
 80012c8:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <samplesTransmission+0xb4>)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	785b      	ldrb	r3, [r3, #1]
 80012d2:	461a      	mov	r2, r3
 80012d4:	463b      	mov	r3, r7
 80012d6:	491b      	ldr	r1, [pc, #108]	; (8001344 <samplesTransmission+0xb8>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f004 f92b 	bl	8005534 <siprintf>

		HAL_UART_Transmit(&huart2,(uint8_t*)s1,2,1000);
 80012de:	1d39      	adds	r1, r7, #4
 80012e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e4:	2202      	movs	r2, #2
 80012e6:	4815      	ldr	r0, [pc, #84]	; (800133c <samplesTransmission+0xb0>)
 80012e8:	f003 fa07 	bl	80046fa <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,(uint8_t*)s2,2,1000);
 80012ec:	4639      	mov	r1, r7
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	2202      	movs	r2, #2
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <samplesTransmission+0xb0>)
 80012f6:	f003 fa00 	bl	80046fa <HAL_UART_Transmit>
	for(int i = 0; i < 512; i++){
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3301      	adds	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001306:	dbd5      	blt.n	80012b4 <samplesTransmission+0x28>
	}

	HAL_UART_Transmit(&huart2,(uint8_t*)&end,1,1000);
 8001308:	f107 010a 	add.w	r1, r7, #10
 800130c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001310:	2201      	movs	r2, #1
 8001312:	480a      	ldr	r0, [pc, #40]	; (800133c <samplesTransmission+0xb0>)
 8001314:	f003 f9f1 	bl	80046fa <HAL_UART_Transmit>

	if (triggerMode == 0 || triggerMode == 1){
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <samplesTransmission+0xbc>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <samplesTransmission+0x9c>
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <samplesTransmission+0xbc>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d102      	bne.n	800132e <samplesTransmission+0xa2>

		startSampling();
 8001328:	f7ff ff1e 	bl	8001168 <startSampling>
 800132c:	e002      	b.n	8001334 <samplesTransmission+0xa8>
	} else {

		triggerMode = 3;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <samplesTransmission+0xbc>)
 8001330:	2203      	movs	r2, #3
 8001332:	701a      	strb	r2, [r3, #0]
	}



}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000598 	.word	0x20000598
 8001340:	200000f4 	.word	0x200000f4
 8001344:	08005d58 	.word	0x08005d58
 8001348:	200000a4 	.word	0x200000a4

0800134c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800134c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001384 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001350:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001352:	e003      	b.n	800135c <LoopCopyDataInit>

08001354 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001356:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001358:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800135a:	3104      	adds	r1, #4

0800135c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800135c:	480b      	ldr	r0, [pc, #44]	; (800138c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001360:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001362:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001364:	d3f6      	bcc.n	8001354 <CopyDataInit>
  ldr  r2, =_sbss
 8001366:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001368:	e002      	b.n	8001370 <LoopFillZerobss>

0800136a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800136a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800136c:	f842 3b04 	str.w	r3, [r2], #4

08001370 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001372:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001374:	d3f9      	bcc.n	800136a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001376:	f7ff fe97 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800137a:	f004 f8af 	bl	80054dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137e:	f7ff fa29 	bl	80007d4 <main>
  bx  lr    
 8001382:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001384:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001388:	08005dc4 	.word	0x08005dc4
  ldr  r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001390:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001394:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001398:	200005f4 	.word	0x200005f4

0800139c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800139c:	e7fe      	b.n	800139c <DMA1_Stream0_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0d      	ldr	r2, [pc, #52]	; (80013e0 <HAL_Init+0x40>)
 80013aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_Init+0x40>)
 80013b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_Init+0x40>)
 80013c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f001 f84d 	bl	8002468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f808 	bl	80013e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d4:	f7ff fcbe 	bl	8000d54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023c00 	.word	0x40023c00

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x54>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x58>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f001 f865 	bl	80024d2 <HAL_SYSTICK_Config>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00e      	b.n	8001430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d80a      	bhi.n	800142e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f001 f82d 	bl	800247e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_InitTick+0x5c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000000 	.word	0x20000000
 800143c:	20000008 	.word	0x20000008
 8001440:	20000004 	.word	0x20000004

08001444 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x20>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <HAL_IncTick+0x24>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <HAL_IncTick+0x24>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000008 	.word	0x20000008
 8001468:	200005ec 	.word	0x200005ec

0800146c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <HAL_GetTick+0x14>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	200005ec 	.word	0x200005ec

08001484 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e033      	b.n	8001502 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d109      	bne.n	80014b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff fc7e 	bl	8000da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 0310 	and.w	r3, r3, #16
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d118      	bne.n	80014f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014ca:	f023 0302 	bic.w	r3, r3, #2
 80014ce:	f043 0202 	orr.w	r2, r3, #2
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 fd6e 	bl	8001fb8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f023 0303 	bic.w	r3, r3, #3
 80014ea:	f043 0201 	orr.w	r2, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	641a      	str	r2, [r3, #64]	; 0x40
 80014f2:	e001      	b.n	80014f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800151e:	2b01      	cmp	r3, #1
 8001520:	d101      	bne.n	8001526 <HAL_ADC_Start+0x1a>
 8001522:	2302      	movs	r3, #2
 8001524:	e08a      	b.n	800163c <HAL_ADC_Start+0x130>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2201      	movs	r2, #1
 800152a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b01      	cmp	r3, #1
 800153a:	d018      	beq.n	800156e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0201 	orr.w	r2, r2, #1
 800154a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800154c:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <HAL_ADC_Start+0x13c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a3e      	ldr	r2, [pc, #248]	; (800164c <HAL_ADC_Start+0x140>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9a      	lsrs	r2, r3, #18
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001560:	e002      	b.n	8001568 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3b01      	subs	r3, #1
 8001566:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f9      	bne.n	8001562 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b01      	cmp	r3, #1
 800157a:	d15e      	bne.n	800163a <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800159a:	2b00      	cmp	r3, #0
 800159c:	d007      	beq.n	80015ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ba:	d106      	bne.n	80015ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c0:	f023 0206 	bic.w	r2, r3, #6
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	645a      	str	r2, [r3, #68]	; 0x44
 80015c8:	e002      	b.n	80015d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d8:	4b1d      	ldr	r3, [pc, #116]	; (8001650 <HAL_ADC_Start+0x144>)
 80015da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f003 031f 	and.w	r3, r3, #31
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10f      	bne.n	8001612 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d11c      	bne.n	800163a <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	e013      	b.n	800163a <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a0f      	ldr	r2, [pc, #60]	; (8001654 <HAL_ADC_Start+0x148>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d10e      	bne.n	800163a <HAL_ADC_Start+0x12e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d107      	bne.n	800163a <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001638:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	20000000 	.word	0x20000000
 800164c:	431bde83 	.word	0x431bde83
 8001650:	40012300 	.word	0x40012300
 8001654:	40012000 	.word	0x40012000

08001658 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Start_IT+0x1a>
 800166e:	2302      	movs	r3, #2
 8001670:	e094      	b.n	800179c <HAL_ADC_Start_IT+0x144>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b01      	cmp	r3, #1
 8001686:	d018      	beq.n	80016ba <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689a      	ldr	r2, [r3, #8]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001698:	4b43      	ldr	r3, [pc, #268]	; (80017a8 <HAL_ADC_Start_IT+0x150>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a43      	ldr	r2, [pc, #268]	; (80017ac <HAL_ADC_Start_IT+0x154>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0c9a      	lsrs	r2, r3, #18
 80016a4:	4613      	mov	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	4413      	add	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80016ac:	e002      	b.n	80016b4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	3b01      	subs	r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f9      	bne.n	80016ae <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d168      	bne.n	800179a <HAL_ADC_Start_IT+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d007      	beq.n	80016fa <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001706:	d106      	bne.n	8001716 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	f023 0206 	bic.w	r2, r3, #6
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	645a      	str	r2, [r3, #68]	; 0x44
 8001714:	e002      	b.n	800171c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001724:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <HAL_ADC_Start_IT+0x158>)
 8001726:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001730:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001740:	f043 0320 	orr.w	r3, r3, #32
 8001744:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10f      	bne.n	8001772 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d11c      	bne.n	800179a <HAL_ADC_Start_IT+0x142>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	e013      	b.n	800179a <HAL_ADC_Start_IT+0x142>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_ADC_Start_IT+0x15c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d10e      	bne.n	800179a <HAL_ADC_Start_IT+0x142>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d107      	bne.n	800179a <HAL_ADC_Start_IT+0x142>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001798:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	20000000 	.word	0x20000000
 80017ac:	431bde83 	.word	0x431bde83
 80017b0:	40012300 	.word	0x40012300
 80017b4:	40012000 	.word	0x40012000

080017b8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	bf0c      	ite	eq
 80017d6:	2301      	moveq	r3, #1
 80017d8:	2300      	movne	r3, #0
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0320 	and.w	r3, r3, #32
 80017e8:	2b20      	cmp	r3, #32
 80017ea:	bf0c      	ite	eq
 80017ec:	2301      	moveq	r3, #1
 80017ee:	2300      	movne	r3, #0
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d049      	beq.n	800188e <HAL_ADC_IRQHandler+0xd6>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d046      	beq.n	800188e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f003 0310 	and.w	r3, r3, #16
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d12b      	bne.n	800187e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800182a:	2b00      	cmp	r3, #0
 800182c:	d127      	bne.n	800187e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001846:	2b00      	cmp	r3, #0
 8001848:	d119      	bne.n	800187e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0220 	bic.w	r2, r2, #32
 8001858:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d105      	bne.n	800187e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f043 0201 	orr.w	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 f9fa 	bl	8001c78 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f06f 0212 	mvn.w	r2, #18
 800188c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b04      	cmp	r3, #4
 800189a:	bf0c      	ite	eq
 800189c:	2301      	moveq	r3, #1
 800189e:	2300      	movne	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	2b80      	cmp	r3, #128	; 0x80
 80018b0:	bf0c      	ite	eq
 80018b2:	2301      	moveq	r3, #1
 80018b4:	2300      	movne	r3, #0
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d057      	beq.n	8001970 <HAL_ADC_IRQHandler+0x1b8>
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d054      	beq.n	8001970 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d139      	bne.n	8001960 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018f2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d006      	beq.n	8001908 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001904:	2b00      	cmp	r3, #0
 8001906:	d12b      	bne.n	8001960 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001912:	2b00      	cmp	r3, #0
 8001914:	d124      	bne.n	8001960 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001920:	2b00      	cmp	r3, #0
 8001922:	d11d      	bne.n	8001960 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001928:	2b00      	cmp	r3, #0
 800192a:	d119      	bne.n	8001960 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800193a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d105      	bne.n	8001960 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f043 0201 	orr.w	r2, r3, #1
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fca7 	bl	80022b4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f06f 020c 	mvn.w	r2, #12
 800196e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b01      	cmp	r3, #1
 800197c:	bf0c      	ite	eq
 800197e:	2301      	moveq	r3, #1
 8001980:	2300      	movne	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001990:	2b40      	cmp	r3, #64	; 0x40
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d017      	beq.n	80019d2 <HAL_ADC_IRQHandler+0x21a>
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d014      	beq.n	80019d2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d10d      	bne.n	80019d2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff f98e 	bl	8000ce4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f06f 0201 	mvn.w	r2, #1
 80019d0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b20      	cmp	r3, #32
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80019f6:	bf0c      	ite	eq
 80019f8:	2301      	moveq	r3, #1
 80019fa:	2300      	movne	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d015      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x27a>
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d012      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a10:	f043 0202 	orr.w	r2, r3, #2
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f06f 0220 	mvn.w	r2, #32
 8001a20:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f93c 	bl	8001ca0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f06f 0220 	mvn.w	r2, #32
 8001a30:	601a      	str	r2, [r3, #0]
  }
}
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Start_DMA+0x1e>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e0b1      	b.n	8001bbe <HAL_ADC_Start_DMA+0x182>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d018      	beq.n	8001aa2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a80:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <HAL_ADC_Start_DMA+0x18c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a51      	ldr	r2, [pc, #324]	; (8001bcc <HAL_ADC_Start_DMA+0x190>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	0c9a      	lsrs	r2, r3, #18
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4413      	add	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a94:	e002      	b.n	8001a9c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f9      	bne.n	8001a96 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	f040 8085 	bne.w	8001bbc <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aba:	f023 0301 	bic.w	r3, r3, #1
 8001abe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001adc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af0:	d106      	bne.n	8001b00 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af6:	f023 0206 	bic.w	r2, r3, #6
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
 8001afe:	e002      	b.n	8001b06 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b0e:	4b30      	ldr	r3, [pc, #192]	; (8001bd0 <HAL_ADC_Start_DMA+0x194>)
 8001b10:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b16:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <HAL_ADC_Start_DMA+0x198>)
 8001b18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1e:	4a2e      	ldr	r2, [pc, #184]	; (8001bd8 <HAL_ADC_Start_DMA+0x19c>)
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	4a2d      	ldr	r2, [pc, #180]	; (8001bdc <HAL_ADC_Start_DMA+0x1a0>)
 8001b28:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b32:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b42:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b52:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	334c      	adds	r3, #76	; 0x4c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f000 fd70 	bl	8002648 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10f      	bne.n	8001b94 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d11c      	bne.n	8001bbc <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b90:	609a      	str	r2, [r3, #8]
 8001b92:	e013      	b.n	8001bbc <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <HAL_ADC_Start_DMA+0x1a4>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10e      	bne.n	8001bbc <HAL_ADC_Start_DMA+0x180>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d107      	bne.n	8001bbc <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bba:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3718      	adds	r7, #24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	431bde83 	.word	0x431bde83
 8001bd0:	40012300 	.word	0x40012300
 8001bd4:	080021b1 	.word	0x080021b1
 8001bd8:	0800226b 	.word	0x0800226b
 8001bdc:	08002287 	.word	0x08002287
 8001be0:	40012000 	.word	0x40012000

08001be4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_ADC_Stop_DMA+0x1a>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e038      	b.n	8001c70 <HAL_ADC_Stop_DMA+0x8c>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 0201 	bic.w	r2, r2, #1
 8001c14:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d120      	bne.n	8001c66 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c32:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 fd5d 	bl	80026f8 <HAL_DMA_Abort>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001c50:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3710      	adds	r7, #16
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1c>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e105      	b.n	8001edc <HAL_ADC_ConfigChannel+0x228>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b09      	cmp	r3, #9
 8001cde:	d925      	bls.n	8001d2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68d9      	ldr	r1, [r3, #12]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3b1e      	subs	r3, #30
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43da      	mvns	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	400a      	ands	r2, r1
 8001d04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68d9      	ldr	r1, [r3, #12]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689a      	ldr	r2, [r3, #8]
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	4603      	mov	r3, r0
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4403      	add	r3, r0
 8001d1e:	3b1e      	subs	r3, #30
 8001d20:	409a      	lsls	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	e022      	b.n	8001d72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6919      	ldr	r1, [r3, #16]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	2207      	movs	r2, #7
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6919      	ldr	r1, [r3, #16]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	4603      	mov	r3, r0
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4403      	add	r3, r0
 8001d68:	409a      	lsls	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d824      	bhi.n	8001dc4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b05      	subs	r3, #5
 8001d8c:	221f      	movs	r2, #31
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	3b05      	subs	r3, #5
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc2:	e04c      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b0c      	cmp	r3, #12
 8001dca:	d824      	bhi.n	8001e16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b23      	subs	r3, #35	; 0x23
 8001dde:	221f      	movs	r2, #31
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43da      	mvns	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	400a      	ands	r2, r1
 8001dec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	3b23      	subs	r3, #35	; 0x23
 8001e08:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
 8001e14:	e023      	b.n	8001e5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	3b41      	subs	r3, #65	; 0x41
 8001e28:	221f      	movs	r2, #31
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	400a      	ands	r2, r1
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	4618      	mov	r0, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	3b41      	subs	r3, #65	; 0x41
 8001e52:	fa00 f203 	lsl.w	r2, r0, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e5e:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <HAL_ADC_ConfigChannel+0x234>)
 8001e60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <HAL_ADC_ConfigChannel+0x238>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d109      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1cc>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b12      	cmp	r3, #18
 8001e72:	d105      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_ADC_ConfigChannel+0x238>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d123      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x21e>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2b10      	cmp	r3, #16
 8001e90:	d003      	beq.n	8001e9a <HAL_ADC_ConfigChannel+0x1e6>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b11      	cmp	r3, #17
 8001e98:	d11b      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d111      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <HAL_ADC_ConfigChannel+0x23c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <HAL_ADC_ConfigChannel+0x240>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	0c9a      	lsrs	r2, r3, #18
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ec4:	e002      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f9      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40012300 	.word	0x40012300
 8001eec:	40012000 	.word	0x40012000
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	431bde83 	.word	0x431bde83

08001ef8 <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_AnalogWDGConfig+0x18>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e04d      	b.n	8001fac <HAL_ADC_AnalogWDGConfig+0xb4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	7c1b      	ldrb	r3, [r3, #16]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d108      	bne.n	8001f32 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	e007      	b.n	8001f42 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f40:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f54:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	6852      	ldr	r2, [r2, #4]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	6892      	ldr	r2, [r2, #8]
 8001f7a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 021f 	bic.w	r2, r2, #31
 8001f8a:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4619      	mov	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc0:	4b79      	ldr	r3, [pc, #484]	; (80021a8 <ADC_Init+0x1f0>)
 8001fc2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6859      	ldr	r1, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	021a      	lsls	r2, r3, #8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002032:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204a:	4a58      	ldr	r2, [pc, #352]	; (80021ac <ADC_Init+0x1f4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d022      	beq.n	8002096 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800205e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002080:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6899      	ldr	r1, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	e00f      	b.n	80020b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0202 	bic.w	r2, r2, #2
 80020c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	7e1b      	ldrb	r3, [r3, #24]
 80020d0:	005a      	lsls	r2, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d01b      	beq.n	800211c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002102:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6859      	ldr	r1, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	3b01      	subs	r3, #1
 8002110:	035a      	lsls	r2, r3, #13
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	e007      	b.n	800212c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800212a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	3b01      	subs	r3, #1
 8002148:	051a      	lsls	r2, r3, #20
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002160:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6899      	ldr	r1, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800216e:	025a      	lsls	r2, r3, #9
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002186:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6899      	ldr	r1, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	029a      	lsls	r2, r3, #10
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	609a      	str	r2, [r3, #8]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40012300 	.word	0x40012300
 80021ac:	0f000001 	.word	0x0f000001

080021b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d13c      	bne.n	8002244 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d12b      	bne.n	800223c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d127      	bne.n	800223c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002204:	2b00      	cmp	r3, #0
 8002206:	d119      	bne.n	800223c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0220 	bic.w	r2, r2, #32
 8002216:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f043 0201 	orr.w	r2, r3, #1
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7ff fd1b 	bl	8001c78 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002242:	e00e      	b.n	8002262 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f7ff fd25 	bl	8001ca0 <HAL_ADC_ErrorCallback>
}
 8002256:	e004      	b.n	8002262 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
}
 8002262:	bf00      	nop
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b084      	sub	sp, #16
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002278:	68f8      	ldr	r0, [r7, #12]
 800227a:	f7ff fd07 	bl	8001c8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2240      	movs	r2, #64	; 0x40
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f043 0204 	orr.w	r2, r3, #4
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f7ff fcfa 	bl	8001ca0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e4:	4013      	ands	r3, r2
 80022e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x44>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <__NVIC_GetPriorityGrouping+0x18>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 0307 	and.w	r3, r3, #7
}
 800231e:	4618      	mov	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	2b00      	cmp	r3, #0
 800233c:	db0b      	blt.n	8002356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <__NVIC_EnableIRQ+0x38>)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	095b      	lsrs	r3, r3, #5
 800234c:	2001      	movs	r0, #1
 800234e:	fa00 f202 	lsl.w	r2, r0, r2
 8002352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	6039      	str	r1, [r7, #0]
 8002372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db0a      	blt.n	8002392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	b2da      	uxtb	r2, r3
 8002380:	490c      	ldr	r1, [pc, #48]	; (80023b4 <__NVIC_SetPriority+0x4c>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	0112      	lsls	r2, r2, #4
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	440b      	add	r3, r1
 800238c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002390:	e00a      	b.n	80023a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <__NVIC_SetPriority+0x50>)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	3b04      	subs	r3, #4
 80023a0:	0112      	lsls	r2, r2, #4
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	440b      	add	r3, r1
 80023a6:	761a      	strb	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000e100 	.word	0xe000e100
 80023b8:	e000ed00 	.word	0xe000ed00

080023bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	; 0x24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f1c3 0307 	rsb	r3, r3, #7
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	bf28      	it	cs
 80023da:	2304      	movcs	r3, #4
 80023dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3304      	adds	r3, #4
 80023e2:	2b06      	cmp	r3, #6
 80023e4:	d902      	bls.n	80023ec <NVIC_EncodePriority+0x30>
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3b03      	subs	r3, #3
 80023ea:	e000      	b.n	80023ee <NVIC_EncodePriority+0x32>
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	401a      	ands	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002404:	f04f 31ff 	mov.w	r1, #4294967295
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43d9      	mvns	r1, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002414:	4313      	orrs	r3, r2
         );
}
 8002416:	4618      	mov	r0, r3
 8002418:	3724      	adds	r7, #36	; 0x24
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
	...

08002424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002434:	d301      	bcc.n	800243a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002436:	2301      	movs	r3, #1
 8002438:	e00f      	b.n	800245a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <SysTick_Config+0x40>)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002442:	210f      	movs	r1, #15
 8002444:	f04f 30ff 	mov.w	r0, #4294967295
 8002448:	f7ff ff8e 	bl	8002368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <SysTick_Config+0x40>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <SysTick_Config+0x40>)
 8002454:	2207      	movs	r2, #7
 8002456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	e000e010 	.word	0xe000e010

08002468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ff29 	bl	80022c8 <__NVIC_SetPriorityGrouping>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002490:	f7ff ff3e 	bl	8002310 <__NVIC_GetPriorityGrouping>
 8002494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	6978      	ldr	r0, [r7, #20]
 800249c:	f7ff ff8e 	bl	80023bc <NVIC_EncodePriority>
 80024a0:	4602      	mov	r2, r0
 80024a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff5d 	bl	8002368 <__NVIC_SetPriority>
}
 80024ae:	bf00      	nop
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	4603      	mov	r3, r0
 80024be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff31 	bl	800232c <__NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff ffa2 	bl	8002424 <SysTick_Config>
 80024e0:	4603      	mov	r3, r0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3708      	adds	r7, #8
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7fe ffb8 	bl	800146c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e099      	b.n	800263c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0201 	bic.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002528:	e00f      	b.n	800254a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800252a:	f7fe ff9f 	bl	800146c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b05      	cmp	r3, #5
 8002536:	d908      	bls.n	800254a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2220      	movs	r2, #32
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2203      	movs	r2, #3
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e078      	b.n	800263c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1e8      	bne.n	800252a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	4b38      	ldr	r3, [pc, #224]	; (8002644 <HAL_DMA_Init+0x158>)
 8002564:	4013      	ands	r3, r2
 8002566:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002576:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800258e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	4313      	orrs	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	2b04      	cmp	r3, #4
 80025a2:	d107      	bne.n	80025b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	4313      	orrs	r3, r2
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f023 0307 	bic.w	r3, r3, #7
 80025ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	2b04      	cmp	r3, #4
 80025dc:	d117      	bne.n	800260e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00e      	beq.n	800260e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fb01 	bl	8002bf8 <DMA_CheckFifoParam>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2240      	movs	r2, #64	; 0x40
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800260a:	2301      	movs	r3, #1
 800260c:	e016      	b.n	800263c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fab8 	bl	8002b8c <DMA_CalcBaseAndBitshift>
 800261c:	4603      	mov	r3, r0
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	223f      	movs	r2, #63	; 0x3f
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	f010803f 	.word	0xf010803f

08002648 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_DMA_Start_IT+0x26>
 800266a:	2302      	movs	r3, #2
 800266c:	e040      	b.n	80026f0 <HAL_DMA_Start_IT+0xa8>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d12f      	bne.n	80026e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2202      	movs	r2, #2
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fa4a 	bl	8002b30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	223f      	movs	r2, #63	; 0x3f
 80026a2:	409a      	lsls	r2, r3
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0216 	orr.w	r2, r2, #22
 80026b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0208 	orr.w	r2, r2, #8
 80026ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e005      	b.n	80026ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026ea:	2302      	movs	r3, #2
 80026ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002706:	f7fe feb1 	bl	800146c <HAL_GetTick>
 800270a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d008      	beq.n	800272a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e052      	b.n	80027d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0216 	bic.w	r2, r2, #22
 8002738:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002748:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d103      	bne.n	800275a <HAL_DMA_Abort+0x62>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0208 	bic.w	r2, r2, #8
 8002768:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800277a:	e013      	b.n	80027a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800277c:	f7fe fe76 	bl	800146c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b05      	cmp	r3, #5
 8002788:	d90c      	bls.n	80027a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2203      	movs	r2, #3
 800279c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e015      	b.n	80027d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1e4      	bne.n	800277c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b6:	223f      	movs	r2, #63	; 0x3f
 80027b8:	409a      	lsls	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d004      	beq.n	80027f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2280      	movs	r2, #128	; 0x80
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e00c      	b.n	8002810 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2205      	movs	r2, #5
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002828:	4b92      	ldr	r3, [pc, #584]	; (8002a74 <HAL_DMA_IRQHandler+0x258>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a92      	ldr	r2, [pc, #584]	; (8002a78 <HAL_DMA_IRQHandler+0x25c>)
 800282e:	fba2 2303 	umull	r2, r3, r2, r3
 8002832:	0a9b      	lsrs	r3, r3, #10
 8002834:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	2208      	movs	r2, #8
 8002848:	409a      	lsls	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4013      	ands	r3, r2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01a      	beq.n	8002888 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0204 	bic.w	r2, r2, #4
 800286e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	2208      	movs	r2, #8
 8002876:	409a      	lsls	r2, r3
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002880:	f043 0201 	orr.w	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800288c:	2201      	movs	r2, #1
 800288e:	409a      	lsls	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4013      	ands	r3, r2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d012      	beq.n	80028be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	2201      	movs	r2, #1
 80028ac:	409a      	lsls	r2, r3
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f043 0202 	orr.w	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	2204      	movs	r2, #4
 80028c4:	409a      	lsls	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d012      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	2204      	movs	r2, #4
 80028e2:	409a      	lsls	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ec:	f043 0204 	orr.w	r2, r3, #4
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	2210      	movs	r2, #16
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d043      	beq.n	800298c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d03c      	beq.n	800298c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2210      	movs	r2, #16
 8002918:	409a      	lsls	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d018      	beq.n	800295e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d108      	bne.n	800294c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b00      	cmp	r3, #0
 8002940:	d024      	beq.n	800298c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	4798      	blx	r3
 800294a:	e01f      	b.n	800298c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
 800295c:	e016      	b.n	800298c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d107      	bne.n	800297c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0208 	bic.w	r2, r2, #8
 800297a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	2220      	movs	r2, #32
 8002992:	409a      	lsls	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 808e 	beq.w	8002aba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 8086 	beq.w	8002aba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b2:	2220      	movs	r2, #32
 80029b4:	409a      	lsls	r2, r3
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b05      	cmp	r3, #5
 80029c4:	d136      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0216 	bic.w	r2, r2, #22
 80029d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d103      	bne.n	80029f6 <HAL_DMA_IRQHandler+0x1da>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0208 	bic.w	r2, r2, #8
 8002a04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	223f      	movs	r2, #63	; 0x3f
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d07d      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
        }
        return;
 8002a32:	e078      	b.n	8002b26 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01c      	beq.n	8002a7c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d108      	bne.n	8002a62 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d030      	beq.n	8002aba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	4798      	blx	r3
 8002a60:	e02b      	b.n	8002aba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d027      	beq.n	8002aba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
 8002a72:	e022      	b.n	8002aba <HAL_DMA_IRQHandler+0x29e>
 8002a74:	20000000 	.word	0x20000000
 8002a78:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10f      	bne.n	8002aaa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0210 	bic.w	r2, r2, #16
 8002a98:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d032      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d022      	beq.n	8002b14 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2205      	movs	r2, #5
 8002ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0201 	bic.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d307      	bcc.n	8002b02 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f2      	bne.n	8002ae6 <HAL_DMA_IRQHandler+0x2ca>
 8002b00:	e000      	b.n	8002b04 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b02:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
 8002b24:	e000      	b.n	8002b28 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b26:	bf00      	nop
    }
  }
}
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop

08002b30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d108      	bne.n	8002b70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b6e:	e007      	b.n	8002b80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	60da      	str	r2, [r3, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	3b10      	subs	r3, #16
 8002b9c:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <DMA_CalcBaseAndBitshift+0x64>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ba6:	4a13      	ldr	r2, [pc, #76]	; (8002bf4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d909      	bls.n	8002bce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	1d1a      	adds	r2, r3, #4
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	659a      	str	r2, [r3, #88]	; 0x58
 8002bcc:	e007      	b.n	8002bde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002bd6:	f023 0303 	bic.w	r3, r3, #3
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	aaaaaaab 	.word	0xaaaaaaab
 8002bf4:	08005d78 	.word	0x08005d78

08002bf8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d11f      	bne.n	8002c52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d855      	bhi.n	8002cc4 <DMA_CheckFifoParam+0xcc>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <DMA_CheckFifoParam+0x28>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002c43 	.word	0x08002c43
 8002c28:	08002c31 	.word	0x08002c31
 8002c2c:	08002cc5 	.word	0x08002cc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d045      	beq.n	8002cc8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c40:	e042      	b.n	8002cc8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c4a:	d13f      	bne.n	8002ccc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c50:	e03c      	b.n	8002ccc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5a:	d121      	bne.n	8002ca0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b03      	cmp	r3, #3
 8002c60:	d836      	bhi.n	8002cd0 <DMA_CheckFifoParam+0xd8>
 8002c62:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <DMA_CheckFifoParam+0x70>)
 8002c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c7f 	.word	0x08002c7f
 8002c70:	08002c79 	.word	0x08002c79
 8002c74:	08002c91 	.word	0x08002c91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7c:	e02f      	b.n	8002cde <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d024      	beq.n	8002cd4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c8e:	e021      	b.n	8002cd4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c98:	d11e      	bne.n	8002cd8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c9e:	e01b      	b.n	8002cd8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <DMA_CheckFifoParam+0xb4>
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d003      	beq.n	8002cb2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002caa:	e018      	b.n	8002cde <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb0:	e015      	b.n	8002cde <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00e      	beq.n	8002cdc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc2:	e00b      	b.n	8002cdc <DMA_CheckFifoParam+0xe4>
      break;
 8002cc4:	bf00      	nop
 8002cc6:	e00a      	b.n	8002cde <DMA_CheckFifoParam+0xe6>
      break;
 8002cc8:	bf00      	nop
 8002cca:	e008      	b.n	8002cde <DMA_CheckFifoParam+0xe6>
      break;
 8002ccc:	bf00      	nop
 8002cce:	e006      	b.n	8002cde <DMA_CheckFifoParam+0xe6>
      break;
 8002cd0:	bf00      	nop
 8002cd2:	e004      	b.n	8002cde <DMA_CheckFifoParam+0xe6>
      break;
 8002cd4:	bf00      	nop
 8002cd6:	e002      	b.n	8002cde <DMA_CheckFifoParam+0xe6>
      break;   
 8002cd8:	bf00      	nop
 8002cda:	e000      	b.n	8002cde <DMA_CheckFifoParam+0xe6>
      break;
 8002cdc:	bf00      	nop
    }
  } 
  
  return status; 
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e159      	b.n	8002fbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	f040 8148 	bne.w	8002fb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d00b      	beq.n	8002d46 <HAL_GPIO_Init+0x5a>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d007      	beq.n	8002d46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d3a:	2b11      	cmp	r3, #17
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b12      	cmp	r3, #18
 8002d44:	d130      	bne.n	8002da8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 0201 	and.w	r2, r3, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0xfc>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b12      	cmp	r3, #18
 8002de6:	d123      	bne.n	8002e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	08da      	lsrs	r2, r3, #3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3208      	adds	r2, #8
 8002df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	08da      	lsrs	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3208      	adds	r2, #8
 8002e2a:	69b9      	ldr	r1, [r7, #24]
 8002e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0203 	and.w	r2, r3, #3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a2 	beq.w	8002fb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	4b56      	ldr	r3, [pc, #344]	; (8002fd0 <HAL_GPIO_Init+0x2e4>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	4a55      	ldr	r2, [pc, #340]	; (8002fd0 <HAL_GPIO_Init+0x2e4>)
 8002e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e80:	6453      	str	r3, [r2, #68]	; 0x44
 8002e82:	4b53      	ldr	r3, [pc, #332]	; (8002fd0 <HAL_GPIO_Init+0x2e4>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8e:	4a51      	ldr	r2, [pc, #324]	; (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	3302      	adds	r3, #2
 8002e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	220f      	movs	r2, #15
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <HAL_GPIO_Init+0x2ec>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d019      	beq.n	8002eee <HAL_GPIO_Init+0x202>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a47      	ldr	r2, [pc, #284]	; (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_GPIO_Init+0x1fe>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a46      	ldr	r2, [pc, #280]	; (8002fe0 <HAL_GPIO_Init+0x2f4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_GPIO_Init+0x1fa>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a45      	ldr	r2, [pc, #276]	; (8002fe4 <HAL_GPIO_Init+0x2f8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <HAL_GPIO_Init+0x1f6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a44      	ldr	r2, [pc, #272]	; (8002fe8 <HAL_GPIO_Init+0x2fc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_GPIO_Init+0x1f2>
 8002eda:	2304      	movs	r3, #4
 8002edc:	e008      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ede:	2307      	movs	r3, #7
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f002 0203 	and.w	r2, r2, #3
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f00:	4934      	ldr	r1, [pc, #208]	; (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f0e:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_GPIO_Init+0x300>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f32:	4a2e      	ldr	r2, [pc, #184]	; (8002fec <HAL_GPIO_Init+0x300>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f38:	4b2c      	ldr	r3, [pc, #176]	; (8002fec <HAL_GPIO_Init+0x300>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5c:	4a23      	ldr	r2, [pc, #140]	; (8002fec <HAL_GPIO_Init+0x300>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <HAL_GPIO_Init+0x300>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f86:	4a19      	ldr	r2, [pc, #100]	; (8002fec <HAL_GPIO_Init+0x300>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_GPIO_Init+0x300>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb0:	4a0e      	ldr	r2, [pc, #56]	; (8002fec <HAL_GPIO_Init+0x300>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	f67f aea2 	bls.w	8002d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	3724      	adds	r7, #36	; 0x24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	40013800 	.word	0x40013800
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	40020400 	.word	0x40020400
 8002fe0:	40020800 	.word	0x40020800
 8002fe4:	40020c00 	.word	0x40020c00
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	40013c00 	.word	0x40013c00

08002ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e25b      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d075      	beq.n	80030fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800300e:	4ba3      	ldr	r3, [pc, #652]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b04      	cmp	r3, #4
 8003018:	d00c      	beq.n	8003034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301a:	4ba0      	ldr	r3, [pc, #640]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003022:	2b08      	cmp	r3, #8
 8003024:	d112      	bne.n	800304c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003026:	4b9d      	ldr	r3, [pc, #628]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	4b99      	ldr	r3, [pc, #612]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05b      	beq.n	80030f8 <HAL_RCC_OscConfig+0x108>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d157      	bne.n	80030f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e236      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x74>
 8003056:	4b91      	ldr	r3, [pc, #580]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a90      	ldr	r2, [pc, #576]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e01d      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x98>
 800306e:	4b8b      	ldr	r3, [pc, #556]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a8a      	ldr	r2, [pc, #552]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b88      	ldr	r3, [pc, #544]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a87      	ldr	r2, [pc, #540]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003088:	4b84      	ldr	r3, [pc, #528]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a83      	ldr	r2, [pc, #524]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b81      	ldr	r3, [pc, #516]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a80      	ldr	r2, [pc, #512]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe f9e0 	bl	800146c <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fe f9dc 	bl	800146c <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1fb      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b76      	ldr	r3, [pc, #472]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0xc0>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe f9cc 	bl	800146c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fe f9c8 	bl	800146c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	; 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1e7      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	4b6c      	ldr	r3, [pc, #432]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0xe8>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d063      	beq.n	80031ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003106:	4b65      	ldr	r3, [pc, #404]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003112:	4b62      	ldr	r3, [pc, #392]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311a:	2b08      	cmp	r3, #8
 800311c:	d11c      	bne.n	8003158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311e:	4b5f      	ldr	r3, [pc, #380]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d116      	bne.n	8003158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	4b5c      	ldr	r3, [pc, #368]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_RCC_OscConfig+0x152>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1bb      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b56      	ldr	r3, [pc, #344]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4952      	ldr	r1, [pc, #328]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	e03a      	b.n	80031ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003160:	4b4f      	ldr	r3, [pc, #316]	; (80032a0 <HAL_RCC_OscConfig+0x2b0>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fe f981 	bl	800146c <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316e:	f7fe f97d 	bl	800146c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e19c      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003180:	4b46      	ldr	r3, [pc, #280]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4b43      	ldr	r3, [pc, #268]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4940      	ldr	r1, [pc, #256]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
 80031a0:	e015      	b.n	80031ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <HAL_RCC_OscConfig+0x2b0>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe f960 	bl	800146c <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fe f95c 	bl	800146c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e17b      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	4b36      	ldr	r3, [pc, #216]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d030      	beq.n	800323c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d016      	beq.n	8003210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e2:	4b30      	ldr	r3, [pc, #192]	; (80032a4 <HAL_RCC_OscConfig+0x2b4>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fe f940 	bl	800146c <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fe f93c 	bl	800146c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e15b      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003202:	4b26      	ldr	r3, [pc, #152]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x200>
 800320e:	e015      	b.n	800323c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_RCC_OscConfig+0x2b4>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003216:	f7fe f929 	bl	800146c <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321e:	f7fe f925 	bl	800146c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e144      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003230:	4b1a      	ldr	r3, [pc, #104]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f0      	bne.n	800321e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80a0 	beq.w	800338a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324e:	4b13      	ldr	r3, [pc, #76]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10f      	bne.n	800327a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	4b0f      	ldr	r3, [pc, #60]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	4a0e      	ldr	r2, [pc, #56]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 8003264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003268:	6413      	str	r3, [r2, #64]	; 0x40
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_RCC_OscConfig+0x2ac>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003272:	60bb      	str	r3, [r7, #8]
 8003274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003276:	2301      	movs	r3, #1
 8003278:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_OscConfig+0x2b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d121      	bne.n	80032ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_RCC_OscConfig+0x2b8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <HAL_RCC_OscConfig+0x2b8>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003292:	f7fe f8eb 	bl	800146c <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003298:	e011      	b.n	80032be <HAL_RCC_OscConfig+0x2ce>
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	42470000 	.word	0x42470000
 80032a4:	42470e80 	.word	0x42470e80
 80032a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f7fe f8de 	bl	800146c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e0fd      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b81      	ldr	r3, [pc, #516]	; (80034c4 <HAL_RCC_OscConfig+0x4d4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d106      	bne.n	80032e0 <HAL_RCC_OscConfig+0x2f0>
 80032d2:	4b7d      	ldr	r3, [pc, #500]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	4a7c      	ldr	r2, [pc, #496]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6713      	str	r3, [r2, #112]	; 0x70
 80032de:	e01c      	b.n	800331a <HAL_RCC_OscConfig+0x32a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d10c      	bne.n	8003302 <HAL_RCC_OscConfig+0x312>
 80032e8:	4b77      	ldr	r3, [pc, #476]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ec:	4a76      	ldr	r2, [pc, #472]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 80032ee:	f043 0304 	orr.w	r3, r3, #4
 80032f2:	6713      	str	r3, [r2, #112]	; 0x70
 80032f4:	4b74      	ldr	r3, [pc, #464]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	4a73      	ldr	r2, [pc, #460]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 80032fa:	f043 0301 	orr.w	r3, r3, #1
 80032fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003300:	e00b      	b.n	800331a <HAL_RCC_OscConfig+0x32a>
 8003302:	4b71      	ldr	r3, [pc, #452]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	4a70      	ldr	r2, [pc, #448]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 8003308:	f023 0301 	bic.w	r3, r3, #1
 800330c:	6713      	str	r3, [r2, #112]	; 0x70
 800330e:	4b6e      	ldr	r3, [pc, #440]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	4a6d      	ldr	r2, [pc, #436]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 8003314:	f023 0304 	bic.w	r3, r3, #4
 8003318:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d015      	beq.n	800334e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003322:	f7fe f8a3 	bl	800146c <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800332a:	f7fe f89f 	bl	800146c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	f241 3288 	movw	r2, #5000	; 0x1388
 8003338:	4293      	cmp	r3, r2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e0bc      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003340:	4b61      	ldr	r3, [pc, #388]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0ee      	beq.n	800332a <HAL_RCC_OscConfig+0x33a>
 800334c:	e014      	b.n	8003378 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800334e:	f7fe f88d 	bl	800146c <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003354:	e00a      	b.n	800336c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003356:	f7fe f889 	bl	800146c <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	f241 3288 	movw	r2, #5000	; 0x1388
 8003364:	4293      	cmp	r3, r2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0a6      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800336c:	4b56      	ldr	r3, [pc, #344]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1ee      	bne.n	8003356 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003378:	7dfb      	ldrb	r3, [r7, #23]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d105      	bne.n	800338a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800337e:	4b52      	ldr	r3, [pc, #328]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a51      	ldr	r2, [pc, #324]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 8003384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f000 8092 	beq.w	80034b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003394:	4b4c      	ldr	r3, [pc, #304]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b08      	cmp	r3, #8
 800339e:	d05c      	beq.n	800345a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d141      	bne.n	800342c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a8:	4b48      	ldr	r3, [pc, #288]	; (80034cc <HAL_RCC_OscConfig+0x4dc>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ae:	f7fe f85d 	bl	800146c <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b6:	f7fe f859 	bl	800146c <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e078      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c8:	4b3f      	ldr	r3, [pc, #252]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	431a      	orrs	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	019b      	lsls	r3, r3, #6
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	3b01      	subs	r3, #1
 80033ee:	041b      	lsls	r3, r3, #16
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f6:	061b      	lsls	r3, r3, #24
 80033f8:	4933      	ldr	r1, [pc, #204]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033fe:	4b33      	ldr	r3, [pc, #204]	; (80034cc <HAL_RCC_OscConfig+0x4dc>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003404:	f7fe f832 	bl	800146c <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340c:	f7fe f82e 	bl	800146c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04d      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341e:	4b2a      	ldr	r3, [pc, #168]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0f0      	beq.n	800340c <HAL_RCC_OscConfig+0x41c>
 800342a:	e045      	b.n	80034b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800342c:	4b27      	ldr	r3, [pc, #156]	; (80034cc <HAL_RCC_OscConfig+0x4dc>)
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003432:	f7fe f81b 	bl	800146c <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003438:	e008      	b.n	800344c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800343a:	f7fe f817 	bl	800146c <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d901      	bls.n	800344c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e036      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344c:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1f0      	bne.n	800343a <HAL_RCC_OscConfig+0x44a>
 8003458:	e02e      	b.n	80034b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d101      	bne.n	8003466 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e029      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003466:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <HAL_RCC_OscConfig+0x4d8>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	429a      	cmp	r2, r3
 8003478:	d11c      	bne.n	80034b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d115      	bne.n	80034b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800348e:	4013      	ands	r3, r2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003494:	4293      	cmp	r3, r2
 8003496:	d10d      	bne.n	80034b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d106      	bne.n	80034b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40007000 	.word	0x40007000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	42470060 	.word	0x42470060

080034d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0cc      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b68      	ldr	r3, [pc, #416]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d90c      	bls.n	800350c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b65      	ldr	r3, [pc, #404]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b63      	ldr	r3, [pc, #396]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0b8      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003524:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800352e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800353c:	4b53      	ldr	r3, [pc, #332]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a52      	ldr	r2, [pc, #328]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003548:	4b50      	ldr	r3, [pc, #320]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	494d      	ldr	r1, [pc, #308]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d044      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b47      	ldr	r3, [pc, #284]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d119      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e07f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d003      	beq.n	800358e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358a:	2b03      	cmp	r3, #3
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b3f      	ldr	r3, [pc, #252]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e067      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b37      	ldr	r3, [pc, #220]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4934      	ldr	r1, [pc, #208]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c0:	f7fd ff54 	bl	800146c <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fd ff50 	bl	800146c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e04f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b25      	ldr	r3, [pc, #148]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d20c      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b22      	ldr	r3, [pc, #136]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e032      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4916      	ldr	r1, [pc, #88]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	490e      	ldr	r1, [pc, #56]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003656:	f000 f821 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800365a:	4601      	mov	r1, r0
 800365c:	4b0b      	ldr	r3, [pc, #44]	; (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	5cd3      	ldrb	r3, [r2, r3]
 800366a:	fa21 f303 	lsr.w	r3, r1, r3
 800366e:	4a09      	ldr	r2, [pc, #36]	; (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003672:	4b09      	ldr	r3, [pc, #36]	; (8003698 <HAL_RCC_ClockConfig+0x1c8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd feb4 	bl	80013e4 <HAL_InitTick>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023c00 	.word	0x40023c00
 800368c:	40023800 	.word	0x40023800
 8003690:	08005d60 	.word	0x08005d60
 8003694:	20000000 	.word	0x20000000
 8003698:	20000004 	.word	0x20000004

0800369c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	2300      	movs	r3, #0
 80036ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b2:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 030c 	and.w	r3, r3, #12
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d007      	beq.n	80036ce <HAL_RCC_GetSysClockFreq+0x32>
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d008      	beq.n	80036d4 <HAL_RCC_GetSysClockFreq+0x38>
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 808d 	bne.w	80037e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b4b      	ldr	r3, [pc, #300]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80036ca:	60bb      	str	r3, [r7, #8]
       break;
 80036cc:	e08c      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ce:	4b4b      	ldr	r3, [pc, #300]	; (80037fc <HAL_RCC_GetSysClockFreq+0x160>)
 80036d0:	60bb      	str	r3, [r7, #8]
      break;
 80036d2:	e089      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d4:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036de:	4b45      	ldr	r3, [pc, #276]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d023      	beq.n	8003732 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036ea:	4b42      	ldr	r3, [pc, #264]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	099b      	lsrs	r3, r3, #6
 80036f0:	f04f 0400 	mov.w	r4, #0
 80036f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	ea03 0501 	and.w	r5, r3, r1
 8003700:	ea04 0602 	and.w	r6, r4, r2
 8003704:	4a3d      	ldr	r2, [pc, #244]	; (80037fc <HAL_RCC_GetSysClockFreq+0x160>)
 8003706:	fb02 f106 	mul.w	r1, r2, r6
 800370a:	2200      	movs	r2, #0
 800370c:	fb02 f205 	mul.w	r2, r2, r5
 8003710:	440a      	add	r2, r1
 8003712:	493a      	ldr	r1, [pc, #232]	; (80037fc <HAL_RCC_GetSysClockFreq+0x160>)
 8003714:	fba5 0101 	umull	r0, r1, r5, r1
 8003718:	1853      	adds	r3, r2, r1
 800371a:	4619      	mov	r1, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f04f 0400 	mov.w	r4, #0
 8003722:	461a      	mov	r2, r3
 8003724:	4623      	mov	r3, r4
 8003726:	f7fc fdab 	bl	8000280 <__aeabi_uldivmod>
 800372a:	4603      	mov	r3, r0
 800372c:	460c      	mov	r4, r1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	e049      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003732:	4b30      	ldr	r3, [pc, #192]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	099b      	lsrs	r3, r3, #6
 8003738:	f04f 0400 	mov.w	r4, #0
 800373c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	ea03 0501 	and.w	r5, r3, r1
 8003748:	ea04 0602 	and.w	r6, r4, r2
 800374c:	4629      	mov	r1, r5
 800374e:	4632      	mov	r2, r6
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	f04f 0400 	mov.w	r4, #0
 8003758:	0154      	lsls	r4, r2, #5
 800375a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800375e:	014b      	lsls	r3, r1, #5
 8003760:	4619      	mov	r1, r3
 8003762:	4622      	mov	r2, r4
 8003764:	1b49      	subs	r1, r1, r5
 8003766:	eb62 0206 	sbc.w	r2, r2, r6
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	f04f 0400 	mov.w	r4, #0
 8003772:	0194      	lsls	r4, r2, #6
 8003774:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003778:	018b      	lsls	r3, r1, #6
 800377a:	1a5b      	subs	r3, r3, r1
 800377c:	eb64 0402 	sbc.w	r4, r4, r2
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	00e2      	lsls	r2, r4, #3
 800378a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800378e:	00d9      	lsls	r1, r3, #3
 8003790:	460b      	mov	r3, r1
 8003792:	4614      	mov	r4, r2
 8003794:	195b      	adds	r3, r3, r5
 8003796:	eb44 0406 	adc.w	r4, r4, r6
 800379a:	f04f 0100 	mov.w	r1, #0
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	02a2      	lsls	r2, r4, #10
 80037a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80037a8:	0299      	lsls	r1, r3, #10
 80037aa:	460b      	mov	r3, r1
 80037ac:	4614      	mov	r4, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	4621      	mov	r1, r4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f04f 0400 	mov.w	r4, #0
 80037b8:	461a      	mov	r2, r3
 80037ba:	4623      	mov	r3, r4
 80037bc:	f7fc fd60 	bl	8000280 <__aeabi_uldivmod>
 80037c0:	4603      	mov	r3, r0
 80037c2:	460c      	mov	r4, r1
 80037c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037c6:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	3301      	adds	r3, #1
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	60bb      	str	r3, [r7, #8]
      break;
 80037e0:	e002      	b.n	80037e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80037e4:	60bb      	str	r3, [r7, #8]
      break;
 80037e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037e8:	68bb      	ldr	r3, [r7, #8]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800
 80037f8:	00f42400 	.word	0x00f42400
 80037fc:	017d7840 	.word	0x017d7840

08003800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <HAL_RCC_GetHCLKFreq+0x14>)
 8003806:	681b      	ldr	r3, [r3, #0]
}
 8003808:	4618      	mov	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000000 	.word	0x20000000

08003818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800381c:	f7ff fff0 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003820:	4601      	mov	r1, r0
 8003822:	4b05      	ldr	r3, [pc, #20]	; (8003838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	0a9b      	lsrs	r3, r3, #10
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	4a03      	ldr	r2, [pc, #12]	; (800383c <HAL_RCC_GetPCLK1Freq+0x24>)
 800382e:	5cd3      	ldrb	r3, [r2, r3]
 8003830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003834:	4618      	mov	r0, r3
 8003836:	bd80      	pop	{r7, pc}
 8003838:	40023800 	.word	0x40023800
 800383c:	08005d70 	.word	0x08005d70

08003840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003844:	f7ff ffdc 	bl	8003800 <HAL_RCC_GetHCLKFreq>
 8003848:	4601      	mov	r1, r0
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0b5b      	lsrs	r3, r3, #13
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4a03      	ldr	r2, [pc, #12]	; (8003864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003856:	5cd3      	ldrb	r3, [r2, r3]
 8003858:	fa21 f303 	lsr.w	r3, r1, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40023800 	.word	0x40023800
 8003864:	08005d70 	.word	0x08005d70

08003868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e01d      	b.n	80038b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd fb08 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	4619      	mov	r1, r3
 80038a6:	4610      	mov	r0, r2
 80038a8:	f000 fb8c 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e01d      	b.n	800390c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d106      	bne.n	80038ea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 f815 	bl	8003914 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3304      	adds	r3, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4610      	mov	r0, r2
 80038fe:	f000 fb61 	bl	8003fc4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3708      	adds	r7, #8
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b0c      	cmp	r3, #12
 8003936:	d841      	bhi.n	80039bc <HAL_TIM_OC_Start_IT+0x94>
 8003938:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <HAL_TIM_OC_Start_IT+0x18>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003975 	.word	0x08003975
 8003944:	080039bd 	.word	0x080039bd
 8003948:	080039bd 	.word	0x080039bd
 800394c:	080039bd 	.word	0x080039bd
 8003950:	08003987 	.word	0x08003987
 8003954:	080039bd 	.word	0x080039bd
 8003958:	080039bd 	.word	0x080039bd
 800395c:	080039bd 	.word	0x080039bd
 8003960:	08003999 	.word	0x08003999
 8003964:	080039bd 	.word	0x080039bd
 8003968:	080039bd 	.word	0x080039bd
 800396c:	080039bd 	.word	0x080039bd
 8003970:	080039ab 	.word	0x080039ab
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0202 	orr.w	r2, r2, #2
 8003982:	60da      	str	r2, [r3, #12]
      break;
 8003984:	e01b      	b.n	80039be <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0204 	orr.w	r2, r2, #4
 8003994:	60da      	str	r2, [r3, #12]
      break;
 8003996:	e012      	b.n	80039be <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0208 	orr.w	r2, r2, #8
 80039a6:	60da      	str	r2, [r3, #12]
      break;
 80039a8:	e009      	b.n	80039be <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f042 0210 	orr.w	r2, r2, #16
 80039b8:	60da      	str	r2, [r3, #12]
      break;
 80039ba:	e000      	b.n	80039be <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 80039bc:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2201      	movs	r2, #1
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fda2 	bl	8004510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a10      	ldr	r2, [pc, #64]	; (8003a14 <HAL_TIM_OC_Start_IT+0xec>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d107      	bne.n	80039e6 <HAL_TIM_OC_Start_IT+0xbe>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b06      	cmp	r3, #6
 80039f6:	d007      	beq.n	8003a08 <HAL_TIM_OC_Start_IT+0xe0>
  {
    __HAL_TIM_ENABLE(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40010000 	.word	0x40010000

08003a18 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b0c      	cmp	r3, #12
 8003a26:	d841      	bhi.n	8003aac <HAL_TIM_OC_Stop_IT+0x94>
 8003a28:	a201      	add	r2, pc, #4	; (adr r2, 8003a30 <HAL_TIM_OC_Stop_IT+0x18>)
 8003a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2e:	bf00      	nop
 8003a30:	08003a65 	.word	0x08003a65
 8003a34:	08003aad 	.word	0x08003aad
 8003a38:	08003aad 	.word	0x08003aad
 8003a3c:	08003aad 	.word	0x08003aad
 8003a40:	08003a77 	.word	0x08003a77
 8003a44:	08003aad 	.word	0x08003aad
 8003a48:	08003aad 	.word	0x08003aad
 8003a4c:	08003aad 	.word	0x08003aad
 8003a50:	08003a89 	.word	0x08003a89
 8003a54:	08003aad 	.word	0x08003aad
 8003a58:	08003aad 	.word	0x08003aad
 8003a5c:	08003aad 	.word	0x08003aad
 8003a60:	08003a9b 	.word	0x08003a9b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0202 	bic.w	r2, r2, #2
 8003a72:	60da      	str	r2, [r3, #12]
      break;
 8003a74:	e01b      	b.n	8003aae <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0204 	bic.w	r2, r2, #4
 8003a84:	60da      	str	r2, [r3, #12]
      break;
 8003a86:	e012      	b.n	8003aae <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0208 	bic.w	r2, r2, #8
 8003a96:	60da      	str	r2, [r3, #12]
      break;
 8003a98:	e009      	b.n	8003aae <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68da      	ldr	r2, [r3, #12]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0210 	bic.w	r2, r2, #16
 8003aa8:	60da      	str	r2, [r3, #12]
      break;
 8003aaa:	e000      	b.n	8003aae <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8003aac:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	6839      	ldr	r1, [r7, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fd2a 	bl	8004510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_TIM_OC_Stop_IT+0x118>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d117      	bne.n	8003af6 <HAL_TIM_OC_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a1a      	ldr	r2, [r3, #32]
 8003acc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10f      	bne.n	8003af6 <HAL_TIM_OC_Stop_IT+0xde>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6a1a      	ldr	r2, [r3, #32]
 8003adc:	f240 4344 	movw	r3, #1092	; 0x444
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d107      	bne.n	8003af6 <HAL_TIM_OC_Stop_IT+0xde>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10f      	bne.n	8003b26 <HAL_TIM_OC_Stop_IT+0x10e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6a1a      	ldr	r2, [r3, #32]
 8003b0c:	f240 4344 	movw	r3, #1092	; 0x444
 8003b10:	4013      	ands	r3, r2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d107      	bne.n	8003b26 <HAL_TIM_OC_Stop_IT+0x10e>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0201 	bic.w	r2, r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3708      	adds	r7, #8
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40010000 	.word	0x40010000

08003b34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d122      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d11b      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f06f 0202 	mvn.w	r2, #2
 8003b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fa05 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003b7c:	e005      	b.n	8003b8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7fd f852 	bl	8000c28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fa08 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d122      	bne.n	8003be4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d11b      	bne.n	8003be4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f06f 0204 	mvn.w	r2, #4
 8003bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d003      	beq.n	8003bd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 f9db 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003bd0:	e005      	b.n	8003bde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7fd f828 	bl	8000c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f9de 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691b      	ldr	r3, [r3, #16]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d122      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d11b      	bne.n	8003c38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f06f 0208 	mvn.w	r2, #8
 8003c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9b1 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003c24:	e005      	b.n	8003c32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f7fc fffe 	bl	8000c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f000 f9b4 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	f003 0310 	and.w	r3, r3, #16
 8003c42:	2b10      	cmp	r3, #16
 8003c44:	d122      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b10      	cmp	r3, #16
 8003c52:	d11b      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f06f 0210 	mvn.w	r2, #16
 8003c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2208      	movs	r2, #8
 8003c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	69db      	ldr	r3, [r3, #28]
 8003c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f987 	bl	8003f86 <HAL_TIM_IC_CaptureCallback>
 8003c78:	e005      	b.n	8003c86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7fc ffd4 	bl	8000c28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f98a 	bl	8003f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d10e      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d107      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0201 	mvn.w	r2, #1
 8003cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f95d 	bl	8003f72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	2b80      	cmp	r3, #128	; 0x80
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd0:	2b80      	cmp	r3, #128	; 0x80
 8003cd2:	d107      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fcb4 	bl	800464c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d10e      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfc:	2b40      	cmp	r3, #64	; 0x40
 8003cfe:	d107      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f94f 	bl	8003fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d10e      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d107      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0220 	mvn.w	r2, #32
 8003d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fc7e 	bl	8004638 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d3c:	bf00      	nop
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_OC_ConfigChannel+0x1a>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e04e      	b.n	8003dfc <HAL_TIM_OC_ConfigChannel+0xb8>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b0c      	cmp	r3, #12
 8003d72:	d839      	bhi.n	8003de8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <HAL_TIM_OC_ConfigChannel+0x38>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003db1 	.word	0x08003db1
 8003d80:	08003de9 	.word	0x08003de9
 8003d84:	08003de9 	.word	0x08003de9
 8003d88:	08003de9 	.word	0x08003de9
 8003d8c:	08003dbf 	.word	0x08003dbf
 8003d90:	08003de9 	.word	0x08003de9
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003de9 	.word	0x08003de9
 8003d9c:	08003dcd 	.word	0x08003dcd
 8003da0:	08003de9 	.word	0x08003de9
 8003da4:	08003de9 	.word	0x08003de9
 8003da8:	08003de9 	.word	0x08003de9
 8003dac:	08003ddb 	.word	0x08003ddb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f984 	bl	80040c4 <TIM_OC1_SetConfig>
      break;
 8003dbc:	e015      	b.n	8003dea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68b9      	ldr	r1, [r7, #8]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 f9e3 	bl	8004190 <TIM_OC2_SetConfig>
      break;
 8003dca:	e00e      	b.n	8003dea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fa48 	bl	8004268 <TIM_OC3_SetConfig>
      break;
 8003dd8:	e007      	b.n	8003dea <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 faab 	bl	800433c <TIM_OC4_SetConfig>
      break;
 8003de6:	e000      	b.n	8003dea <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003de8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_TIM_ConfigClockSource+0x18>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e0a6      	b.n	8003f6a <HAL_TIM_ConfigClockSource+0x166>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d067      	beq.n	8003f24 <HAL_TIM_ConfigClockSource+0x120>
 8003e54:	2b40      	cmp	r3, #64	; 0x40
 8003e56:	d80b      	bhi.n	8003e70 <HAL_TIM_ConfigClockSource+0x6c>
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d073      	beq.n	8003f44 <HAL_TIM_ConfigClockSource+0x140>
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d802      	bhi.n	8003e66 <HAL_TIM_ConfigClockSource+0x62>
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d06f      	beq.n	8003f44 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003e64:	e078      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d06c      	beq.n	8003f44 <HAL_TIM_ConfigClockSource+0x140>
 8003e6a:	2b30      	cmp	r3, #48	; 0x30
 8003e6c:	d06a      	beq.n	8003f44 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003e6e:	e073      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e70:	2b70      	cmp	r3, #112	; 0x70
 8003e72:	d00d      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0x8c>
 8003e74:	2b70      	cmp	r3, #112	; 0x70
 8003e76:	d804      	bhi.n	8003e82 <HAL_TIM_ConfigClockSource+0x7e>
 8003e78:	2b50      	cmp	r3, #80	; 0x50
 8003e7a:	d033      	beq.n	8003ee4 <HAL_TIM_ConfigClockSource+0xe0>
 8003e7c:	2b60      	cmp	r3, #96	; 0x60
 8003e7e:	d041      	beq.n	8003f04 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003e80:	e06a      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e86:	d066      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x152>
 8003e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8c:	d017      	beq.n	8003ebe <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003e8e:	e063      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6899      	ldr	r1, [r3, #8]
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f000 fb16 	bl	80044d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003eb2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	609a      	str	r2, [r3, #8]
      break;
 8003ebc:	e04c      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	6899      	ldr	r1, [r3, #8]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f000 faff 	bl	80044d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee0:	609a      	str	r2, [r3, #8]
      break;
 8003ee2:	e039      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f000 fa73 	bl	80043dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2150      	movs	r1, #80	; 0x50
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 facc 	bl	800449a <TIM_ITRx_SetConfig>
      break;
 8003f02:	e029      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6818      	ldr	r0, [r3, #0]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	461a      	mov	r2, r3
 8003f12:	f000 fa92 	bl	800443a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2160      	movs	r1, #96	; 0x60
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fabc 	bl	800449a <TIM_ITRx_SetConfig>
      break;
 8003f22:	e019      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6818      	ldr	r0, [r3, #0]
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	6859      	ldr	r1, [r3, #4]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	461a      	mov	r2, r3
 8003f32:	f000 fa53 	bl	80043dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2140      	movs	r1, #64	; 0x40
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 faac 	bl	800449a <TIM_ITRx_SetConfig>
      break;
 8003f42:	e009      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f000 faa3 	bl	800449a <TIM_ITRx_SetConfig>
      break;
 8003f54:	e000      	b.n	8003f58 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
	...

08003fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a34      	ldr	r2, [pc, #208]	; (80040a8 <TIM_Base_SetConfig+0xe4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00f      	beq.n	8003ffc <TIM_Base_SetConfig+0x38>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d00b      	beq.n	8003ffc <TIM_Base_SetConfig+0x38>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a31      	ldr	r2, [pc, #196]	; (80040ac <TIM_Base_SetConfig+0xe8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d007      	beq.n	8003ffc <TIM_Base_SetConfig+0x38>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a30      	ldr	r2, [pc, #192]	; (80040b0 <TIM_Base_SetConfig+0xec>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d003      	beq.n	8003ffc <TIM_Base_SetConfig+0x38>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a2f      	ldr	r2, [pc, #188]	; (80040b4 <TIM_Base_SetConfig+0xf0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d108      	bne.n	800400e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <TIM_Base_SetConfig+0xe4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01b      	beq.n	800404e <TIM_Base_SetConfig+0x8a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401c:	d017      	beq.n	800404e <TIM_Base_SetConfig+0x8a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <TIM_Base_SetConfig+0xe8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <TIM_Base_SetConfig+0x8a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a21      	ldr	r2, [pc, #132]	; (80040b0 <TIM_Base_SetConfig+0xec>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00f      	beq.n	800404e <TIM_Base_SetConfig+0x8a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a20      	ldr	r2, [pc, #128]	; (80040b4 <TIM_Base_SetConfig+0xf0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00b      	beq.n	800404e <TIM_Base_SetConfig+0x8a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a1f      	ldr	r2, [pc, #124]	; (80040b8 <TIM_Base_SetConfig+0xf4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <TIM_Base_SetConfig+0x8a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a1e      	ldr	r2, [pc, #120]	; (80040bc <TIM_Base_SetConfig+0xf8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_Base_SetConfig+0x8a>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a1d      	ldr	r2, [pc, #116]	; (80040c0 <TIM_Base_SetConfig+0xfc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d108      	bne.n	8004060 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <TIM_Base_SetConfig+0xe4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d103      	bne.n	8004094 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	615a      	str	r2, [r3, #20]
}
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40000400 	.word	0x40000400
 80040b0:	40000800 	.word	0x40000800
 80040b4:	40000c00 	.word	0x40000c00
 80040b8:	40014000 	.word	0x40014000
 80040bc:	40014400 	.word	0x40014400
 80040c0:	40014800 	.word	0x40014800

080040c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0201 	bic.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f023 0303 	bic.w	r3, r3, #3
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f023 0302 	bic.w	r3, r3, #2
 800410c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1c      	ldr	r2, [pc, #112]	; (800418c <TIM_OC1_SetConfig+0xc8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10c      	bne.n	800413a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f023 0308 	bic.w	r3, r3, #8
 8004126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a13      	ldr	r2, [pc, #76]	; (800418c <TIM_OC1_SetConfig+0xc8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d111      	bne.n	8004166 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	621a      	str	r2, [r3, #32]
}
 8004180:	bf00      	nop
 8004182:	371c      	adds	r7, #28
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	40010000 	.word	0x40010000

08004190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f023 0210 	bic.w	r2, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	021b      	lsls	r3, r3, #8
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0320 	bic.w	r3, r3, #32
 80041da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a1e      	ldr	r2, [pc, #120]	; (8004264 <TIM_OC2_SetConfig+0xd4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d10d      	bne.n	800420c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800420a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a15      	ldr	r2, [pc, #84]	; (8004264 <TIM_OC2_SetConfig+0xd4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d113      	bne.n	800423c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800421a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000

08004268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004268:	b480      	push	{r7}
 800426a:	b087      	sub	sp, #28
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a1b      	ldr	r3, [r3, #32]
 8004282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0303 	bic.w	r3, r3, #3
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	021b      	lsls	r3, r3, #8
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <TIM_OC3_SetConfig+0xd0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d10d      	bne.n	80042e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	021b      	lsls	r3, r3, #8
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a14      	ldr	r2, [pc, #80]	; (8004338 <TIM_OC3_SetConfig+0xd0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d113      	bne.n	8004312 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	621a      	str	r2, [r3, #32]
}
 800432c:	bf00      	nop
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	40010000 	.word	0x40010000

0800433c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	021b      	lsls	r3, r3, #8
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	031b      	lsls	r3, r3, #12
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	4a10      	ldr	r2, [pc, #64]	; (80043d8 <TIM_OC4_SetConfig+0x9c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d109      	bne.n	80043b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685a      	ldr	r2, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40010000 	.word	0x40010000

080043dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f023 0201 	bic.w	r2, r3, #1
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f023 030a 	bic.w	r3, r3, #10
 8004418:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4313      	orrs	r3, r2
 8004420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800443a:	b480      	push	{r7}
 800443c:	b087      	sub	sp, #28
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0210 	bic.w	r2, r3, #16
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	031b      	lsls	r3, r3, #12
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004476:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	621a      	str	r2, [r3, #32]
}
 800448e:	bf00      	nop
 8004490:	371c      	adds	r7, #28
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	f043 0307 	orr.w	r3, r3, #7
 80044bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	609a      	str	r2, [r3, #8]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	021a      	lsls	r2, r3, #8
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	431a      	orrs	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	609a      	str	r2, [r3, #8]
}
 8004504:	bf00      	nop
 8004506:	371c      	adds	r7, #28
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 031f 	and.w	r3, r3, #31
 8004522:	2201      	movs	r2, #1
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a1a      	ldr	r2, [r3, #32]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	43db      	mvns	r3, r3
 8004532:	401a      	ands	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1a      	ldr	r2, [r3, #32]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 031f 	and.w	r3, r3, #31
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	fa01 f303 	lsl.w	r3, r1, r3
 8004548:	431a      	orrs	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
	...

0800455c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004570:	2302      	movs	r3, #2
 8004572:	e050      	b.n	8004616 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2202      	movs	r2, #2
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a1c      	ldr	r2, [pc, #112]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d018      	beq.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c0:	d013      	beq.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a18      	ldr	r2, [pc, #96]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a16      	ldr	r2, [pc, #88]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a15      	ldr	r2, [pc, #84]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a13      	ldr	r2, [pc, #76]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d10c      	bne.n	8004604 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40010000 	.word	0x40010000
 8004628:	40000400 	.word	0x40000400
 800462c:	40000800 	.word	0x40000800
 8004630:	40000c00 	.word	0x40000c00
 8004634:	40014000 	.word	0x40014000

08004638 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e03f      	b.n	80046f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7fc fc32 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2224      	movs	r2, #36	; 0x24
 8004690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fb97 	bl	8004dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b088      	sub	sp, #32
 80046fe:	af02      	add	r7, sp, #8
 8004700:	60f8      	str	r0, [r7, #12]
 8004702:	60b9      	str	r1, [r7, #8]
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	4613      	mov	r3, r2
 8004708:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800470a:	2300      	movs	r3, #0
 800470c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b20      	cmp	r3, #32
 8004718:	f040 8083 	bne.w	8004822 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_UART_Transmit+0x2e>
 8004722:	88fb      	ldrh	r3, [r7, #6]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e07b      	b.n	8004824 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_UART_Transmit+0x40>
 8004736:	2302      	movs	r3, #2
 8004738:	e074      	b.n	8004824 <HAL_UART_Transmit+0x12a>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2221      	movs	r2, #33	; 0x21
 800474c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004750:	f7fc fe8c 	bl	800146c <HAL_GetTick>
 8004754:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	88fa      	ldrh	r2, [r7, #6]
 8004760:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800476a:	e042      	b.n	80047f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004782:	d122      	bne.n	80047ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2200      	movs	r2, #0
 800478c:	2180      	movs	r1, #128	; 0x80
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 f9b6 	bl	8004b00 <UART_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e042      	b.n	8004824 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	461a      	mov	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3302      	adds	r3, #2
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	e017      	b.n	80047f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	3301      	adds	r3, #1
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	e013      	b.n	80047f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2200      	movs	r2, #0
 80047d2:	2180      	movs	r1, #128	; 0x80
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f993 	bl	8004b00 <UART_WaitOnFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e01f      	b.n	8004824 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	1c5a      	adds	r2, r3, #1
 80047e8:	60ba      	str	r2, [r7, #8]
 80047ea:	781a      	ldrb	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1b7      	bne.n	800476c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2200      	movs	r2, #0
 8004804:	2140      	movs	r1, #64	; 0x40
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f97a 	bl	8004b00 <UART_WaitOnFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e006      	b.n	8004824 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e000      	b.n	8004824 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004822:	2302      	movs	r3, #2
  }
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	4613      	mov	r3, r2
 8004838:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b20      	cmp	r3, #32
 8004844:	d140      	bne.n	80048c8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_UART_Receive_IT+0x26>
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e039      	b.n	80048ca <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_UART_Receive_IT+0x38>
 8004860:	2302      	movs	r3, #2
 8004862:	e032      	b.n	80048ca <HAL_UART_Receive_IT+0x9e>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	88fa      	ldrh	r2, [r7, #6]
 8004876:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	88fa      	ldrh	r2, [r7, #6]
 800487c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2222      	movs	r2, #34	; 0x22
 8004888:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68da      	ldr	r2, [r3, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0220 	orr.w	r2, r2, #32
 80048c2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	e000      	b.n	80048ca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80048c8:	2302      	movs	r3, #2
  }
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
	...

080048d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d10d      	bne.n	800492a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_UART_IRQHandler+0x52>
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f9d6 	bl	8004cd4 <UART_Receive_IT>
      return;
 8004928:	e0d1      	b.n	8004ace <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80b0 	beq.w	8004a92 <HAL_UART_IRQHandler+0x1ba>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d105      	bne.n	8004948 <HAL_UART_IRQHandler+0x70>
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 80a5 	beq.w	8004a92 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_UART_IRQHandler+0x90>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004960:	f043 0201 	orr.w	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_UART_IRQHandler+0xb0>
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d005      	beq.n	8004988 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004980:	f043 0202 	orr.w	r2, r3, #2
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_UART_IRQHandler+0xd0>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a0:	f043 0204 	orr.w	r2, r3, #4
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00f      	beq.n	80049d2 <HAL_UART_IRQHandler+0xfa>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d104      	bne.n	80049c6 <HAL_UART_IRQHandler+0xee>
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ca:	f043 0208 	orr.w	r2, r3, #8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d078      	beq.n	8004acc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f003 0320 	and.w	r3, r3, #32
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d007      	beq.n	80049f4 <HAL_UART_IRQHandler+0x11c>
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f970 	bl	8004cd4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	bf0c      	ite	eq
 8004a02:	2301      	moveq	r3, #1
 8004a04:	2300      	movne	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d102      	bne.n	8004a1c <HAL_UART_IRQHandler+0x144>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d031      	beq.n	8004a80 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f8b9 	bl	8004b94 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d123      	bne.n	8004a78 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a3e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d013      	beq.n	8004a70 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4c:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <HAL_UART_IRQHandler+0x1fc>)
 8004a4e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fd febf 	bl	80027d8 <HAL_DMA_Abort_IT>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d016      	beq.n	8004a8e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a6a:	4610      	mov	r0, r2
 8004a6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6e:	e00e      	b.n	8004a8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f83b 	bl	8004aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a76:	e00a      	b.n	8004a8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 f837 	bl	8004aec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7e:	e006      	b.n	8004a8e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f833 	bl	8004aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004a8c:	e01e      	b.n	8004acc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8e:	bf00      	nop
    return;
 8004a90:	e01c      	b.n	8004acc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d008      	beq.n	8004aae <HAL_UART_IRQHandler+0x1d6>
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f8a6 	bl	8004bf8 <UART_Transmit_IT>
    return;
 8004aac:	e00f      	b.n	8004ace <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <HAL_UART_IRQHandler+0x1f6>
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d005      	beq.n	8004ace <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8ee 	bl	8004ca4 <UART_EndTransmit_IT>
    return;
 8004ac8:	bf00      	nop
 8004aca:	e000      	b.n	8004ace <HAL_UART_IRQHandler+0x1f6>
    return;
 8004acc:	bf00      	nop
  }
}
 8004ace:	3720      	adds	r7, #32
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	08004bd1 	.word	0x08004bd1

08004ad8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b10:	e02c      	b.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d028      	beq.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d007      	beq.n	8004b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b20:	f7fc fca4 	bl	800146c <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d21d      	bcs.n	8004b6c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b3e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695a      	ldr	r2, [r3, #20]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0201 	bic.w	r2, r2, #1
 8004b4e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e00f      	b.n	8004b8c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4013      	ands	r3, r2
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	bf0c      	ite	eq
 8004b7c:	2301      	moveq	r3, #1
 8004b7e:	2300      	movne	r3, #0
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d0c3      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004baa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695a      	ldr	r2, [r3, #20]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2200      	movs	r2, #0
 8004be2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff ff7e 	bl	8004aec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bf0:	bf00      	nop
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b21      	cmp	r3, #33	; 0x21
 8004c0a:	d144      	bne.n	8004c96 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c14:	d11a      	bne.n	8004c4c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c2a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d105      	bne.n	8004c40 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	1c9a      	adds	r2, r3, #2
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	621a      	str	r2, [r3, #32]
 8004c3e:	e00e      	b.n	8004c5e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	621a      	str	r2, [r3, #32]
 8004c4a:	e008      	b.n	8004c5e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	1c59      	adds	r1, r3, #1
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6211      	str	r1, [r2, #32]
 8004c56:	781a      	ldrb	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10f      	bne.n	8004c92 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	e000      	b.n	8004c98 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c96:	2302      	movs	r3, #2
  }
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ff07 	bl	8004ad8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b22      	cmp	r3, #34	; 0x22
 8004ce6:	d171      	bne.n	8004dcc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf0:	d123      	bne.n	8004d3a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10e      	bne.n	8004d1e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	1c9a      	adds	r2, r3, #2
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d1c:	e029      	b.n	8004d72 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	1c5a      	adds	r2, r3, #1
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	629a      	str	r2, [r3, #40]	; 0x28
 8004d38:	e01b      	b.n	8004d72 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6858      	ldr	r0, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d4c:	1c59      	adds	r1, r3, #1
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6291      	str	r1, [r2, #40]	; 0x28
 8004d52:	b2c2      	uxtb	r2, r0
 8004d54:	701a      	strb	r2, [r3, #0]
 8004d56:	e00c      	b.n	8004d72 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	1c58      	adds	r0, r3, #1
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	6288      	str	r0, [r1, #40]	; 0x28
 8004d6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d120      	bne.n	8004dc8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0220 	bic.w	r2, r2, #32
 8004d94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004da4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2220      	movs	r2, #32
 8004dba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7fb feec 	bl	8000b9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	e002      	b.n	8004dce <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	e000      	b.n	8004dce <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004dcc:	2302      	movs	r3, #2
  }
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ddc:	b085      	sub	sp, #20
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e1a:	f023 030c 	bic.w	r3, r3, #12
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	430b      	orrs	r3, r1
 8004e26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e46:	f040 818b 	bne.w	8005160 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4ac1      	ldr	r2, [pc, #772]	; (8005154 <UART_SetConfig+0x37c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d005      	beq.n	8004e60 <UART_SetConfig+0x88>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4abf      	ldr	r2, [pc, #764]	; (8005158 <UART_SetConfig+0x380>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	f040 80bd 	bne.w	8004fda <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e60:	f7fe fcee 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 8004e64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	461d      	mov	r5, r3
 8004e6a:	f04f 0600 	mov.w	r6, #0
 8004e6e:	46a8      	mov	r8, r5
 8004e70:	46b1      	mov	r9, r6
 8004e72:	eb18 0308 	adds.w	r3, r8, r8
 8004e76:	eb49 0409 	adc.w	r4, r9, r9
 8004e7a:	4698      	mov	r8, r3
 8004e7c:	46a1      	mov	r9, r4
 8004e7e:	eb18 0805 	adds.w	r8, r8, r5
 8004e82:	eb49 0906 	adc.w	r9, r9, r6
 8004e86:	f04f 0100 	mov.w	r1, #0
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e9a:	4688      	mov	r8, r1
 8004e9c:	4691      	mov	r9, r2
 8004e9e:	eb18 0005 	adds.w	r0, r8, r5
 8004ea2:	eb49 0106 	adc.w	r1, r9, r6
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	461d      	mov	r5, r3
 8004eac:	f04f 0600 	mov.w	r6, #0
 8004eb0:	196b      	adds	r3, r5, r5
 8004eb2:	eb46 0406 	adc.w	r4, r6, r6
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4623      	mov	r3, r4
 8004eba:	f7fb f9e1 	bl	8000280 <__aeabi_uldivmod>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4ba5      	ldr	r3, [pc, #660]	; (800515c <UART_SetConfig+0x384>)
 8004ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	461d      	mov	r5, r3
 8004ed4:	f04f 0600 	mov.w	r6, #0
 8004ed8:	46a9      	mov	r9, r5
 8004eda:	46b2      	mov	sl, r6
 8004edc:	eb19 0309 	adds.w	r3, r9, r9
 8004ee0:	eb4a 040a 	adc.w	r4, sl, sl
 8004ee4:	4699      	mov	r9, r3
 8004ee6:	46a2      	mov	sl, r4
 8004ee8:	eb19 0905 	adds.w	r9, r9, r5
 8004eec:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ef0:	f04f 0100 	mov.w	r1, #0
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004efc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f04:	4689      	mov	r9, r1
 8004f06:	4692      	mov	sl, r2
 8004f08:	eb19 0005 	adds.w	r0, r9, r5
 8004f0c:	eb4a 0106 	adc.w	r1, sl, r6
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	461d      	mov	r5, r3
 8004f16:	f04f 0600 	mov.w	r6, #0
 8004f1a:	196b      	adds	r3, r5, r5
 8004f1c:	eb46 0406 	adc.w	r4, r6, r6
 8004f20:	461a      	mov	r2, r3
 8004f22:	4623      	mov	r3, r4
 8004f24:	f7fb f9ac 	bl	8000280 <__aeabi_uldivmod>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	460c      	mov	r4, r1
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4b8b      	ldr	r3, [pc, #556]	; (800515c <UART_SetConfig+0x384>)
 8004f30:	fba3 1302 	umull	r1, r3, r3, r2
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	2164      	movs	r1, #100	; 0x64
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	3332      	adds	r3, #50	; 0x32
 8004f42:	4a86      	ldr	r2, [pc, #536]	; (800515c <UART_SetConfig+0x384>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	005b      	lsls	r3, r3, #1
 8004f4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f50:	4498      	add	r8, r3
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	461d      	mov	r5, r3
 8004f56:	f04f 0600 	mov.w	r6, #0
 8004f5a:	46a9      	mov	r9, r5
 8004f5c:	46b2      	mov	sl, r6
 8004f5e:	eb19 0309 	adds.w	r3, r9, r9
 8004f62:	eb4a 040a 	adc.w	r4, sl, sl
 8004f66:	4699      	mov	r9, r3
 8004f68:	46a2      	mov	sl, r4
 8004f6a:	eb19 0905 	adds.w	r9, r9, r5
 8004f6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f72:	f04f 0100 	mov.w	r1, #0
 8004f76:	f04f 0200 	mov.w	r2, #0
 8004f7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f86:	4689      	mov	r9, r1
 8004f88:	4692      	mov	sl, r2
 8004f8a:	eb19 0005 	adds.w	r0, r9, r5
 8004f8e:	eb4a 0106 	adc.w	r1, sl, r6
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	461d      	mov	r5, r3
 8004f98:	f04f 0600 	mov.w	r6, #0
 8004f9c:	196b      	adds	r3, r5, r5
 8004f9e:	eb46 0406 	adc.w	r4, r6, r6
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4623      	mov	r3, r4
 8004fa6:	f7fb f96b 	bl	8000280 <__aeabi_uldivmod>
 8004faa:	4603      	mov	r3, r0
 8004fac:	460c      	mov	r4, r1
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4b6a      	ldr	r3, [pc, #424]	; (800515c <UART_SetConfig+0x384>)
 8004fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	2164      	movs	r1, #100	; 0x64
 8004fba:	fb01 f303 	mul.w	r3, r1, r3
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	3332      	adds	r3, #50	; 0x32
 8004fc4:	4a65      	ldr	r2, [pc, #404]	; (800515c <UART_SetConfig+0x384>)
 8004fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	f003 0207 	and.w	r2, r3, #7
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4442      	add	r2, r8
 8004fd6:	609a      	str	r2, [r3, #8]
 8004fd8:	e26f      	b.n	80054ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fda:	f7fe fc1d 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 8004fde:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	f04f 0600 	mov.w	r6, #0
 8004fe8:	46a8      	mov	r8, r5
 8004fea:	46b1      	mov	r9, r6
 8004fec:	eb18 0308 	adds.w	r3, r8, r8
 8004ff0:	eb49 0409 	adc.w	r4, r9, r9
 8004ff4:	4698      	mov	r8, r3
 8004ff6:	46a1      	mov	r9, r4
 8004ff8:	eb18 0805 	adds.w	r8, r8, r5
 8004ffc:	eb49 0906 	adc.w	r9, r9, r6
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800500c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005010:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005014:	4688      	mov	r8, r1
 8005016:	4691      	mov	r9, r2
 8005018:	eb18 0005 	adds.w	r0, r8, r5
 800501c:	eb49 0106 	adc.w	r1, r9, r6
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	461d      	mov	r5, r3
 8005026:	f04f 0600 	mov.w	r6, #0
 800502a:	196b      	adds	r3, r5, r5
 800502c:	eb46 0406 	adc.w	r4, r6, r6
 8005030:	461a      	mov	r2, r3
 8005032:	4623      	mov	r3, r4
 8005034:	f7fb f924 	bl	8000280 <__aeabi_uldivmod>
 8005038:	4603      	mov	r3, r0
 800503a:	460c      	mov	r4, r1
 800503c:	461a      	mov	r2, r3
 800503e:	4b47      	ldr	r3, [pc, #284]	; (800515c <UART_SetConfig+0x384>)
 8005040:	fba3 2302 	umull	r2, r3, r3, r2
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	461d      	mov	r5, r3
 800504e:	f04f 0600 	mov.w	r6, #0
 8005052:	46a9      	mov	r9, r5
 8005054:	46b2      	mov	sl, r6
 8005056:	eb19 0309 	adds.w	r3, r9, r9
 800505a:	eb4a 040a 	adc.w	r4, sl, sl
 800505e:	4699      	mov	r9, r3
 8005060:	46a2      	mov	sl, r4
 8005062:	eb19 0905 	adds.w	r9, r9, r5
 8005066:	eb4a 0a06 	adc.w	sl, sl, r6
 800506a:	f04f 0100 	mov.w	r1, #0
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005076:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800507a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800507e:	4689      	mov	r9, r1
 8005080:	4692      	mov	sl, r2
 8005082:	eb19 0005 	adds.w	r0, r9, r5
 8005086:	eb4a 0106 	adc.w	r1, sl, r6
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	461d      	mov	r5, r3
 8005090:	f04f 0600 	mov.w	r6, #0
 8005094:	196b      	adds	r3, r5, r5
 8005096:	eb46 0406 	adc.w	r4, r6, r6
 800509a:	461a      	mov	r2, r3
 800509c:	4623      	mov	r3, r4
 800509e:	f7fb f8ef 	bl	8000280 <__aeabi_uldivmod>
 80050a2:	4603      	mov	r3, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	461a      	mov	r2, r3
 80050a8:	4b2c      	ldr	r3, [pc, #176]	; (800515c <UART_SetConfig+0x384>)
 80050aa:	fba3 1302 	umull	r1, r3, r3, r2
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	2164      	movs	r1, #100	; 0x64
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	3332      	adds	r3, #50	; 0x32
 80050bc:	4a27      	ldr	r2, [pc, #156]	; (800515c <UART_SetConfig+0x384>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050ca:	4498      	add	r8, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	461d      	mov	r5, r3
 80050d0:	f04f 0600 	mov.w	r6, #0
 80050d4:	46a9      	mov	r9, r5
 80050d6:	46b2      	mov	sl, r6
 80050d8:	eb19 0309 	adds.w	r3, r9, r9
 80050dc:	eb4a 040a 	adc.w	r4, sl, sl
 80050e0:	4699      	mov	r9, r3
 80050e2:	46a2      	mov	sl, r4
 80050e4:	eb19 0905 	adds.w	r9, r9, r5
 80050e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80050ec:	f04f 0100 	mov.w	r1, #0
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005100:	4689      	mov	r9, r1
 8005102:	4692      	mov	sl, r2
 8005104:	eb19 0005 	adds.w	r0, r9, r5
 8005108:	eb4a 0106 	adc.w	r1, sl, r6
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	461d      	mov	r5, r3
 8005112:	f04f 0600 	mov.w	r6, #0
 8005116:	196b      	adds	r3, r5, r5
 8005118:	eb46 0406 	adc.w	r4, r6, r6
 800511c:	461a      	mov	r2, r3
 800511e:	4623      	mov	r3, r4
 8005120:	f7fb f8ae 	bl	8000280 <__aeabi_uldivmod>
 8005124:	4603      	mov	r3, r0
 8005126:	460c      	mov	r4, r1
 8005128:	461a      	mov	r2, r3
 800512a:	4b0c      	ldr	r3, [pc, #48]	; (800515c <UART_SetConfig+0x384>)
 800512c:	fba3 1302 	umull	r1, r3, r3, r2
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	2164      	movs	r1, #100	; 0x64
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	3332      	adds	r3, #50	; 0x32
 800513e:	4a07      	ldr	r2, [pc, #28]	; (800515c <UART_SetConfig+0x384>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	f003 0207 	and.w	r2, r3, #7
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4442      	add	r2, r8
 8005150:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005152:	e1b2      	b.n	80054ba <UART_SetConfig+0x6e2>
 8005154:	40011000 	.word	0x40011000
 8005158:	40011400 	.word	0x40011400
 800515c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4ad7      	ldr	r2, [pc, #860]	; (80054c4 <UART_SetConfig+0x6ec>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d005      	beq.n	8005176 <UART_SetConfig+0x39e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4ad6      	ldr	r2, [pc, #856]	; (80054c8 <UART_SetConfig+0x6f0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	f040 80d1 	bne.w	8005318 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005176:	f7fe fb63 	bl	8003840 <HAL_RCC_GetPCLK2Freq>
 800517a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	469a      	mov	sl, r3
 8005180:	f04f 0b00 	mov.w	fp, #0
 8005184:	46d0      	mov	r8, sl
 8005186:	46d9      	mov	r9, fp
 8005188:	eb18 0308 	adds.w	r3, r8, r8
 800518c:	eb49 0409 	adc.w	r4, r9, r9
 8005190:	4698      	mov	r8, r3
 8005192:	46a1      	mov	r9, r4
 8005194:	eb18 080a 	adds.w	r8, r8, sl
 8005198:	eb49 090b 	adc.w	r9, r9, fp
 800519c:	f04f 0100 	mov.w	r1, #0
 80051a0:	f04f 0200 	mov.w	r2, #0
 80051a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051b0:	4688      	mov	r8, r1
 80051b2:	4691      	mov	r9, r2
 80051b4:	eb1a 0508 	adds.w	r5, sl, r8
 80051b8:	eb4b 0609 	adc.w	r6, fp, r9
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4619      	mov	r1, r3
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	f04f 0400 	mov.w	r4, #0
 80051ce:	0094      	lsls	r4, r2, #2
 80051d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051d4:	008b      	lsls	r3, r1, #2
 80051d6:	461a      	mov	r2, r3
 80051d8:	4623      	mov	r3, r4
 80051da:	4628      	mov	r0, r5
 80051dc:	4631      	mov	r1, r6
 80051de:	f7fb f84f 	bl	8000280 <__aeabi_uldivmod>
 80051e2:	4603      	mov	r3, r0
 80051e4:	460c      	mov	r4, r1
 80051e6:	461a      	mov	r2, r3
 80051e8:	4bb8      	ldr	r3, [pc, #736]	; (80054cc <UART_SetConfig+0x6f4>)
 80051ea:	fba3 2302 	umull	r2, r3, r3, r2
 80051ee:	095b      	lsrs	r3, r3, #5
 80051f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	469b      	mov	fp, r3
 80051f8:	f04f 0c00 	mov.w	ip, #0
 80051fc:	46d9      	mov	r9, fp
 80051fe:	46e2      	mov	sl, ip
 8005200:	eb19 0309 	adds.w	r3, r9, r9
 8005204:	eb4a 040a 	adc.w	r4, sl, sl
 8005208:	4699      	mov	r9, r3
 800520a:	46a2      	mov	sl, r4
 800520c:	eb19 090b 	adds.w	r9, r9, fp
 8005210:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005214:	f04f 0100 	mov.w	r1, #0
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005220:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005224:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005228:	4689      	mov	r9, r1
 800522a:	4692      	mov	sl, r2
 800522c:	eb1b 0509 	adds.w	r5, fp, r9
 8005230:	eb4c 060a 	adc.w	r6, ip, sl
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4619      	mov	r1, r3
 800523a:	f04f 0200 	mov.w	r2, #0
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	f04f 0400 	mov.w	r4, #0
 8005246:	0094      	lsls	r4, r2, #2
 8005248:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800524c:	008b      	lsls	r3, r1, #2
 800524e:	461a      	mov	r2, r3
 8005250:	4623      	mov	r3, r4
 8005252:	4628      	mov	r0, r5
 8005254:	4631      	mov	r1, r6
 8005256:	f7fb f813 	bl	8000280 <__aeabi_uldivmod>
 800525a:	4603      	mov	r3, r0
 800525c:	460c      	mov	r4, r1
 800525e:	461a      	mov	r2, r3
 8005260:	4b9a      	ldr	r3, [pc, #616]	; (80054cc <UART_SetConfig+0x6f4>)
 8005262:	fba3 1302 	umull	r1, r3, r3, r2
 8005266:	095b      	lsrs	r3, r3, #5
 8005268:	2164      	movs	r1, #100	; 0x64
 800526a:	fb01 f303 	mul.w	r3, r1, r3
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	011b      	lsls	r3, r3, #4
 8005272:	3332      	adds	r3, #50	; 0x32
 8005274:	4a95      	ldr	r2, [pc, #596]	; (80054cc <UART_SetConfig+0x6f4>)
 8005276:	fba2 2303 	umull	r2, r3, r2, r3
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005280:	4498      	add	r8, r3
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	469b      	mov	fp, r3
 8005286:	f04f 0c00 	mov.w	ip, #0
 800528a:	46d9      	mov	r9, fp
 800528c:	46e2      	mov	sl, ip
 800528e:	eb19 0309 	adds.w	r3, r9, r9
 8005292:	eb4a 040a 	adc.w	r4, sl, sl
 8005296:	4699      	mov	r9, r3
 8005298:	46a2      	mov	sl, r4
 800529a:	eb19 090b 	adds.w	r9, r9, fp
 800529e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052a2:	f04f 0100 	mov.w	r1, #0
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052b6:	4689      	mov	r9, r1
 80052b8:	4692      	mov	sl, r2
 80052ba:	eb1b 0509 	adds.w	r5, fp, r9
 80052be:	eb4c 060a 	adc.w	r6, ip, sl
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	4619      	mov	r1, r3
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	0094      	lsls	r4, r2, #2
 80052d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052da:	008b      	lsls	r3, r1, #2
 80052dc:	461a      	mov	r2, r3
 80052de:	4623      	mov	r3, r4
 80052e0:	4628      	mov	r0, r5
 80052e2:	4631      	mov	r1, r6
 80052e4:	f7fa ffcc 	bl	8000280 <__aeabi_uldivmod>
 80052e8:	4603      	mov	r3, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	461a      	mov	r2, r3
 80052ee:	4b77      	ldr	r3, [pc, #476]	; (80054cc <UART_SetConfig+0x6f4>)
 80052f0:	fba3 1302 	umull	r1, r3, r3, r2
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	2164      	movs	r1, #100	; 0x64
 80052f8:	fb01 f303 	mul.w	r3, r1, r3
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	3332      	adds	r3, #50	; 0x32
 8005302:	4a72      	ldr	r2, [pc, #456]	; (80054cc <UART_SetConfig+0x6f4>)
 8005304:	fba2 2303 	umull	r2, r3, r2, r3
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	f003 020f 	and.w	r2, r3, #15
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4442      	add	r2, r8
 8005314:	609a      	str	r2, [r3, #8]
 8005316:	e0d0      	b.n	80054ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005318:	f7fe fa7e 	bl	8003818 <HAL_RCC_GetPCLK1Freq>
 800531c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	469a      	mov	sl, r3
 8005322:	f04f 0b00 	mov.w	fp, #0
 8005326:	46d0      	mov	r8, sl
 8005328:	46d9      	mov	r9, fp
 800532a:	eb18 0308 	adds.w	r3, r8, r8
 800532e:	eb49 0409 	adc.w	r4, r9, r9
 8005332:	4698      	mov	r8, r3
 8005334:	46a1      	mov	r9, r4
 8005336:	eb18 080a 	adds.w	r8, r8, sl
 800533a:	eb49 090b 	adc.w	r9, r9, fp
 800533e:	f04f 0100 	mov.w	r1, #0
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800534a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800534e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005352:	4688      	mov	r8, r1
 8005354:	4691      	mov	r9, r2
 8005356:	eb1a 0508 	adds.w	r5, sl, r8
 800535a:	eb4b 0609 	adc.w	r6, fp, r9
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	4619      	mov	r1, r3
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	f04f 0400 	mov.w	r4, #0
 8005370:	0094      	lsls	r4, r2, #2
 8005372:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005376:	008b      	lsls	r3, r1, #2
 8005378:	461a      	mov	r2, r3
 800537a:	4623      	mov	r3, r4
 800537c:	4628      	mov	r0, r5
 800537e:	4631      	mov	r1, r6
 8005380:	f7fa ff7e 	bl	8000280 <__aeabi_uldivmod>
 8005384:	4603      	mov	r3, r0
 8005386:	460c      	mov	r4, r1
 8005388:	461a      	mov	r2, r3
 800538a:	4b50      	ldr	r3, [pc, #320]	; (80054cc <UART_SetConfig+0x6f4>)
 800538c:	fba3 2302 	umull	r2, r3, r3, r2
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	469b      	mov	fp, r3
 800539a:	f04f 0c00 	mov.w	ip, #0
 800539e:	46d9      	mov	r9, fp
 80053a0:	46e2      	mov	sl, ip
 80053a2:	eb19 0309 	adds.w	r3, r9, r9
 80053a6:	eb4a 040a 	adc.w	r4, sl, sl
 80053aa:	4699      	mov	r9, r3
 80053ac:	46a2      	mov	sl, r4
 80053ae:	eb19 090b 	adds.w	r9, r9, fp
 80053b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053b6:	f04f 0100 	mov.w	r1, #0
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053ca:	4689      	mov	r9, r1
 80053cc:	4692      	mov	sl, r2
 80053ce:	eb1b 0509 	adds.w	r5, fp, r9
 80053d2:	eb4c 060a 	adc.w	r6, ip, sl
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4619      	mov	r1, r3
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	f04f 0300 	mov.w	r3, #0
 80053e4:	f04f 0400 	mov.w	r4, #0
 80053e8:	0094      	lsls	r4, r2, #2
 80053ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053ee:	008b      	lsls	r3, r1, #2
 80053f0:	461a      	mov	r2, r3
 80053f2:	4623      	mov	r3, r4
 80053f4:	4628      	mov	r0, r5
 80053f6:	4631      	mov	r1, r6
 80053f8:	f7fa ff42 	bl	8000280 <__aeabi_uldivmod>
 80053fc:	4603      	mov	r3, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	461a      	mov	r2, r3
 8005402:	4b32      	ldr	r3, [pc, #200]	; (80054cc <UART_SetConfig+0x6f4>)
 8005404:	fba3 1302 	umull	r1, r3, r3, r2
 8005408:	095b      	lsrs	r3, r3, #5
 800540a:	2164      	movs	r1, #100	; 0x64
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	3332      	adds	r3, #50	; 0x32
 8005416:	4a2d      	ldr	r2, [pc, #180]	; (80054cc <UART_SetConfig+0x6f4>)
 8005418:	fba2 2303 	umull	r2, r3, r2, r3
 800541c:	095b      	lsrs	r3, r3, #5
 800541e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005422:	4498      	add	r8, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	469b      	mov	fp, r3
 8005428:	f04f 0c00 	mov.w	ip, #0
 800542c:	46d9      	mov	r9, fp
 800542e:	46e2      	mov	sl, ip
 8005430:	eb19 0309 	adds.w	r3, r9, r9
 8005434:	eb4a 040a 	adc.w	r4, sl, sl
 8005438:	4699      	mov	r9, r3
 800543a:	46a2      	mov	sl, r4
 800543c:	eb19 090b 	adds.w	r9, r9, fp
 8005440:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005444:	f04f 0100 	mov.w	r1, #0
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005458:	4689      	mov	r9, r1
 800545a:	4692      	mov	sl, r2
 800545c:	eb1b 0509 	adds.w	r5, fp, r9
 8005460:	eb4c 060a 	adc.w	r6, ip, sl
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	4619      	mov	r1, r3
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	f04f 0400 	mov.w	r4, #0
 8005476:	0094      	lsls	r4, r2, #2
 8005478:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800547c:	008b      	lsls	r3, r1, #2
 800547e:	461a      	mov	r2, r3
 8005480:	4623      	mov	r3, r4
 8005482:	4628      	mov	r0, r5
 8005484:	4631      	mov	r1, r6
 8005486:	f7fa fefb 	bl	8000280 <__aeabi_uldivmod>
 800548a:	4603      	mov	r3, r0
 800548c:	460c      	mov	r4, r1
 800548e:	461a      	mov	r2, r3
 8005490:	4b0e      	ldr	r3, [pc, #56]	; (80054cc <UART_SetConfig+0x6f4>)
 8005492:	fba3 1302 	umull	r1, r3, r3, r2
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	2164      	movs	r1, #100	; 0x64
 800549a:	fb01 f303 	mul.w	r3, r1, r3
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	3332      	adds	r3, #50	; 0x32
 80054a4:	4a09      	ldr	r2, [pc, #36]	; (80054cc <UART_SetConfig+0x6f4>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	f003 020f 	and.w	r2, r3, #15
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4442      	add	r2, r8
 80054b6:	609a      	str	r2, [r3, #8]
}
 80054b8:	e7ff      	b.n	80054ba <UART_SetConfig+0x6e2>
 80054ba:	bf00      	nop
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c4:	40011000 	.word	0x40011000
 80054c8:	40011400 	.word	0x40011400
 80054cc:	51eb851f 	.word	0x51eb851f

080054d0 <__errno>:
 80054d0:	4b01      	ldr	r3, [pc, #4]	; (80054d8 <__errno+0x8>)
 80054d2:	6818      	ldr	r0, [r3, #0]
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	2000000c 	.word	0x2000000c

080054dc <__libc_init_array>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4e0d      	ldr	r6, [pc, #52]	; (8005514 <__libc_init_array+0x38>)
 80054e0:	4c0d      	ldr	r4, [pc, #52]	; (8005518 <__libc_init_array+0x3c>)
 80054e2:	1ba4      	subs	r4, r4, r6
 80054e4:	10a4      	asrs	r4, r4, #2
 80054e6:	2500      	movs	r5, #0
 80054e8:	42a5      	cmp	r5, r4
 80054ea:	d109      	bne.n	8005500 <__libc_init_array+0x24>
 80054ec:	4e0b      	ldr	r6, [pc, #44]	; (800551c <__libc_init_array+0x40>)
 80054ee:	4c0c      	ldr	r4, [pc, #48]	; (8005520 <__libc_init_array+0x44>)
 80054f0:	f000 fc26 	bl	8005d40 <_init>
 80054f4:	1ba4      	subs	r4, r4, r6
 80054f6:	10a4      	asrs	r4, r4, #2
 80054f8:	2500      	movs	r5, #0
 80054fa:	42a5      	cmp	r5, r4
 80054fc:	d105      	bne.n	800550a <__libc_init_array+0x2e>
 80054fe:	bd70      	pop	{r4, r5, r6, pc}
 8005500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005504:	4798      	blx	r3
 8005506:	3501      	adds	r5, #1
 8005508:	e7ee      	b.n	80054e8 <__libc_init_array+0xc>
 800550a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800550e:	4798      	blx	r3
 8005510:	3501      	adds	r5, #1
 8005512:	e7f2      	b.n	80054fa <__libc_init_array+0x1e>
 8005514:	08005dbc 	.word	0x08005dbc
 8005518:	08005dbc 	.word	0x08005dbc
 800551c:	08005dbc 	.word	0x08005dbc
 8005520:	08005dc0 	.word	0x08005dc0

08005524 <memset>:
 8005524:	4402      	add	r2, r0
 8005526:	4603      	mov	r3, r0
 8005528:	4293      	cmp	r3, r2
 800552a:	d100      	bne.n	800552e <memset+0xa>
 800552c:	4770      	bx	lr
 800552e:	f803 1b01 	strb.w	r1, [r3], #1
 8005532:	e7f9      	b.n	8005528 <memset+0x4>

08005534 <siprintf>:
 8005534:	b40e      	push	{r1, r2, r3}
 8005536:	b500      	push	{lr}
 8005538:	b09c      	sub	sp, #112	; 0x70
 800553a:	ab1d      	add	r3, sp, #116	; 0x74
 800553c:	9002      	str	r0, [sp, #8]
 800553e:	9006      	str	r0, [sp, #24]
 8005540:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005544:	4809      	ldr	r0, [pc, #36]	; (800556c <siprintf+0x38>)
 8005546:	9107      	str	r1, [sp, #28]
 8005548:	9104      	str	r1, [sp, #16]
 800554a:	4909      	ldr	r1, [pc, #36]	; (8005570 <siprintf+0x3c>)
 800554c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005550:	9105      	str	r1, [sp, #20]
 8005552:	6800      	ldr	r0, [r0, #0]
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	a902      	add	r1, sp, #8
 8005558:	f000 f866 	bl	8005628 <_svfiprintf_r>
 800555c:	9b02      	ldr	r3, [sp, #8]
 800555e:	2200      	movs	r2, #0
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	b01c      	add	sp, #112	; 0x70
 8005564:	f85d eb04 	ldr.w	lr, [sp], #4
 8005568:	b003      	add	sp, #12
 800556a:	4770      	bx	lr
 800556c:	2000000c 	.word	0x2000000c
 8005570:	ffff0208 	.word	0xffff0208

08005574 <__ssputs_r>:
 8005574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005578:	688e      	ldr	r6, [r1, #8]
 800557a:	429e      	cmp	r6, r3
 800557c:	4682      	mov	sl, r0
 800557e:	460c      	mov	r4, r1
 8005580:	4690      	mov	r8, r2
 8005582:	4699      	mov	r9, r3
 8005584:	d837      	bhi.n	80055f6 <__ssputs_r+0x82>
 8005586:	898a      	ldrh	r2, [r1, #12]
 8005588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800558c:	d031      	beq.n	80055f2 <__ssputs_r+0x7e>
 800558e:	6825      	ldr	r5, [r4, #0]
 8005590:	6909      	ldr	r1, [r1, #16]
 8005592:	1a6f      	subs	r7, r5, r1
 8005594:	6965      	ldr	r5, [r4, #20]
 8005596:	2302      	movs	r3, #2
 8005598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800559c:	fb95 f5f3 	sdiv	r5, r5, r3
 80055a0:	f109 0301 	add.w	r3, r9, #1
 80055a4:	443b      	add	r3, r7
 80055a6:	429d      	cmp	r5, r3
 80055a8:	bf38      	it	cc
 80055aa:	461d      	movcc	r5, r3
 80055ac:	0553      	lsls	r3, r2, #21
 80055ae:	d530      	bpl.n	8005612 <__ssputs_r+0x9e>
 80055b0:	4629      	mov	r1, r5
 80055b2:	f000 fb2b 	bl	8005c0c <_malloc_r>
 80055b6:	4606      	mov	r6, r0
 80055b8:	b950      	cbnz	r0, 80055d0 <__ssputs_r+0x5c>
 80055ba:	230c      	movs	r3, #12
 80055bc:	f8ca 3000 	str.w	r3, [sl]
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c6:	81a3      	strh	r3, [r4, #12]
 80055c8:	f04f 30ff 	mov.w	r0, #4294967295
 80055cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055d0:	463a      	mov	r2, r7
 80055d2:	6921      	ldr	r1, [r4, #16]
 80055d4:	f000 faa8 	bl	8005b28 <memcpy>
 80055d8:	89a3      	ldrh	r3, [r4, #12]
 80055da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e2:	81a3      	strh	r3, [r4, #12]
 80055e4:	6126      	str	r6, [r4, #16]
 80055e6:	6165      	str	r5, [r4, #20]
 80055e8:	443e      	add	r6, r7
 80055ea:	1bed      	subs	r5, r5, r7
 80055ec:	6026      	str	r6, [r4, #0]
 80055ee:	60a5      	str	r5, [r4, #8]
 80055f0:	464e      	mov	r6, r9
 80055f2:	454e      	cmp	r6, r9
 80055f4:	d900      	bls.n	80055f8 <__ssputs_r+0x84>
 80055f6:	464e      	mov	r6, r9
 80055f8:	4632      	mov	r2, r6
 80055fa:	4641      	mov	r1, r8
 80055fc:	6820      	ldr	r0, [r4, #0]
 80055fe:	f000 fa9e 	bl	8005b3e <memmove>
 8005602:	68a3      	ldr	r3, [r4, #8]
 8005604:	1b9b      	subs	r3, r3, r6
 8005606:	60a3      	str	r3, [r4, #8]
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	441e      	add	r6, r3
 800560c:	6026      	str	r6, [r4, #0]
 800560e:	2000      	movs	r0, #0
 8005610:	e7dc      	b.n	80055cc <__ssputs_r+0x58>
 8005612:	462a      	mov	r2, r5
 8005614:	f000 fb54 	bl	8005cc0 <_realloc_r>
 8005618:	4606      	mov	r6, r0
 800561a:	2800      	cmp	r0, #0
 800561c:	d1e2      	bne.n	80055e4 <__ssputs_r+0x70>
 800561e:	6921      	ldr	r1, [r4, #16]
 8005620:	4650      	mov	r0, sl
 8005622:	f000 faa5 	bl	8005b70 <_free_r>
 8005626:	e7c8      	b.n	80055ba <__ssputs_r+0x46>

08005628 <_svfiprintf_r>:
 8005628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	461d      	mov	r5, r3
 800562e:	898b      	ldrh	r3, [r1, #12]
 8005630:	061f      	lsls	r7, r3, #24
 8005632:	b09d      	sub	sp, #116	; 0x74
 8005634:	4680      	mov	r8, r0
 8005636:	460c      	mov	r4, r1
 8005638:	4616      	mov	r6, r2
 800563a:	d50f      	bpl.n	800565c <_svfiprintf_r+0x34>
 800563c:	690b      	ldr	r3, [r1, #16]
 800563e:	b96b      	cbnz	r3, 800565c <_svfiprintf_r+0x34>
 8005640:	2140      	movs	r1, #64	; 0x40
 8005642:	f000 fae3 	bl	8005c0c <_malloc_r>
 8005646:	6020      	str	r0, [r4, #0]
 8005648:	6120      	str	r0, [r4, #16]
 800564a:	b928      	cbnz	r0, 8005658 <_svfiprintf_r+0x30>
 800564c:	230c      	movs	r3, #12
 800564e:	f8c8 3000 	str.w	r3, [r8]
 8005652:	f04f 30ff 	mov.w	r0, #4294967295
 8005656:	e0c8      	b.n	80057ea <_svfiprintf_r+0x1c2>
 8005658:	2340      	movs	r3, #64	; 0x40
 800565a:	6163      	str	r3, [r4, #20]
 800565c:	2300      	movs	r3, #0
 800565e:	9309      	str	r3, [sp, #36]	; 0x24
 8005660:	2320      	movs	r3, #32
 8005662:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005666:	2330      	movs	r3, #48	; 0x30
 8005668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800566c:	9503      	str	r5, [sp, #12]
 800566e:	f04f 0b01 	mov.w	fp, #1
 8005672:	4637      	mov	r7, r6
 8005674:	463d      	mov	r5, r7
 8005676:	f815 3b01 	ldrb.w	r3, [r5], #1
 800567a:	b10b      	cbz	r3, 8005680 <_svfiprintf_r+0x58>
 800567c:	2b25      	cmp	r3, #37	; 0x25
 800567e:	d13e      	bne.n	80056fe <_svfiprintf_r+0xd6>
 8005680:	ebb7 0a06 	subs.w	sl, r7, r6
 8005684:	d00b      	beq.n	800569e <_svfiprintf_r+0x76>
 8005686:	4653      	mov	r3, sl
 8005688:	4632      	mov	r2, r6
 800568a:	4621      	mov	r1, r4
 800568c:	4640      	mov	r0, r8
 800568e:	f7ff ff71 	bl	8005574 <__ssputs_r>
 8005692:	3001      	adds	r0, #1
 8005694:	f000 80a4 	beq.w	80057e0 <_svfiprintf_r+0x1b8>
 8005698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800569a:	4453      	add	r3, sl
 800569c:	9309      	str	r3, [sp, #36]	; 0x24
 800569e:	783b      	ldrb	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 809d 	beq.w	80057e0 <_svfiprintf_r+0x1b8>
 80056a6:	2300      	movs	r3, #0
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056b0:	9304      	str	r3, [sp, #16]
 80056b2:	9307      	str	r3, [sp, #28]
 80056b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80056b8:	931a      	str	r3, [sp, #104]	; 0x68
 80056ba:	462f      	mov	r7, r5
 80056bc:	2205      	movs	r2, #5
 80056be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80056c2:	4850      	ldr	r0, [pc, #320]	; (8005804 <_svfiprintf_r+0x1dc>)
 80056c4:	f7fa fd8c 	bl	80001e0 <memchr>
 80056c8:	9b04      	ldr	r3, [sp, #16]
 80056ca:	b9d0      	cbnz	r0, 8005702 <_svfiprintf_r+0xda>
 80056cc:	06d9      	lsls	r1, r3, #27
 80056ce:	bf44      	itt	mi
 80056d0:	2220      	movmi	r2, #32
 80056d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056d6:	071a      	lsls	r2, r3, #28
 80056d8:	bf44      	itt	mi
 80056da:	222b      	movmi	r2, #43	; 0x2b
 80056dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80056e0:	782a      	ldrb	r2, [r5, #0]
 80056e2:	2a2a      	cmp	r2, #42	; 0x2a
 80056e4:	d015      	beq.n	8005712 <_svfiprintf_r+0xea>
 80056e6:	9a07      	ldr	r2, [sp, #28]
 80056e8:	462f      	mov	r7, r5
 80056ea:	2000      	movs	r0, #0
 80056ec:	250a      	movs	r5, #10
 80056ee:	4639      	mov	r1, r7
 80056f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056f4:	3b30      	subs	r3, #48	; 0x30
 80056f6:	2b09      	cmp	r3, #9
 80056f8:	d94d      	bls.n	8005796 <_svfiprintf_r+0x16e>
 80056fa:	b1b8      	cbz	r0, 800572c <_svfiprintf_r+0x104>
 80056fc:	e00f      	b.n	800571e <_svfiprintf_r+0xf6>
 80056fe:	462f      	mov	r7, r5
 8005700:	e7b8      	b.n	8005674 <_svfiprintf_r+0x4c>
 8005702:	4a40      	ldr	r2, [pc, #256]	; (8005804 <_svfiprintf_r+0x1dc>)
 8005704:	1a80      	subs	r0, r0, r2
 8005706:	fa0b f000 	lsl.w	r0, fp, r0
 800570a:	4318      	orrs	r0, r3
 800570c:	9004      	str	r0, [sp, #16]
 800570e:	463d      	mov	r5, r7
 8005710:	e7d3      	b.n	80056ba <_svfiprintf_r+0x92>
 8005712:	9a03      	ldr	r2, [sp, #12]
 8005714:	1d11      	adds	r1, r2, #4
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	9103      	str	r1, [sp, #12]
 800571a:	2a00      	cmp	r2, #0
 800571c:	db01      	blt.n	8005722 <_svfiprintf_r+0xfa>
 800571e:	9207      	str	r2, [sp, #28]
 8005720:	e004      	b.n	800572c <_svfiprintf_r+0x104>
 8005722:	4252      	negs	r2, r2
 8005724:	f043 0302 	orr.w	r3, r3, #2
 8005728:	9207      	str	r2, [sp, #28]
 800572a:	9304      	str	r3, [sp, #16]
 800572c:	783b      	ldrb	r3, [r7, #0]
 800572e:	2b2e      	cmp	r3, #46	; 0x2e
 8005730:	d10c      	bne.n	800574c <_svfiprintf_r+0x124>
 8005732:	787b      	ldrb	r3, [r7, #1]
 8005734:	2b2a      	cmp	r3, #42	; 0x2a
 8005736:	d133      	bne.n	80057a0 <_svfiprintf_r+0x178>
 8005738:	9b03      	ldr	r3, [sp, #12]
 800573a:	1d1a      	adds	r2, r3, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	9203      	str	r2, [sp, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	bfb8      	it	lt
 8005744:	f04f 33ff 	movlt.w	r3, #4294967295
 8005748:	3702      	adds	r7, #2
 800574a:	9305      	str	r3, [sp, #20]
 800574c:	4d2e      	ldr	r5, [pc, #184]	; (8005808 <_svfiprintf_r+0x1e0>)
 800574e:	7839      	ldrb	r1, [r7, #0]
 8005750:	2203      	movs	r2, #3
 8005752:	4628      	mov	r0, r5
 8005754:	f7fa fd44 	bl	80001e0 <memchr>
 8005758:	b138      	cbz	r0, 800576a <_svfiprintf_r+0x142>
 800575a:	2340      	movs	r3, #64	; 0x40
 800575c:	1b40      	subs	r0, r0, r5
 800575e:	fa03 f000 	lsl.w	r0, r3, r0
 8005762:	9b04      	ldr	r3, [sp, #16]
 8005764:	4303      	orrs	r3, r0
 8005766:	3701      	adds	r7, #1
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	7839      	ldrb	r1, [r7, #0]
 800576c:	4827      	ldr	r0, [pc, #156]	; (800580c <_svfiprintf_r+0x1e4>)
 800576e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005772:	2206      	movs	r2, #6
 8005774:	1c7e      	adds	r6, r7, #1
 8005776:	f7fa fd33 	bl	80001e0 <memchr>
 800577a:	2800      	cmp	r0, #0
 800577c:	d038      	beq.n	80057f0 <_svfiprintf_r+0x1c8>
 800577e:	4b24      	ldr	r3, [pc, #144]	; (8005810 <_svfiprintf_r+0x1e8>)
 8005780:	bb13      	cbnz	r3, 80057c8 <_svfiprintf_r+0x1a0>
 8005782:	9b03      	ldr	r3, [sp, #12]
 8005784:	3307      	adds	r3, #7
 8005786:	f023 0307 	bic.w	r3, r3, #7
 800578a:	3308      	adds	r3, #8
 800578c:	9303      	str	r3, [sp, #12]
 800578e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005790:	444b      	add	r3, r9
 8005792:	9309      	str	r3, [sp, #36]	; 0x24
 8005794:	e76d      	b.n	8005672 <_svfiprintf_r+0x4a>
 8005796:	fb05 3202 	mla	r2, r5, r2, r3
 800579a:	2001      	movs	r0, #1
 800579c:	460f      	mov	r7, r1
 800579e:	e7a6      	b.n	80056ee <_svfiprintf_r+0xc6>
 80057a0:	2300      	movs	r3, #0
 80057a2:	3701      	adds	r7, #1
 80057a4:	9305      	str	r3, [sp, #20]
 80057a6:	4619      	mov	r1, r3
 80057a8:	250a      	movs	r5, #10
 80057aa:	4638      	mov	r0, r7
 80057ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057b0:	3a30      	subs	r2, #48	; 0x30
 80057b2:	2a09      	cmp	r2, #9
 80057b4:	d903      	bls.n	80057be <_svfiprintf_r+0x196>
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0c8      	beq.n	800574c <_svfiprintf_r+0x124>
 80057ba:	9105      	str	r1, [sp, #20]
 80057bc:	e7c6      	b.n	800574c <_svfiprintf_r+0x124>
 80057be:	fb05 2101 	mla	r1, r5, r1, r2
 80057c2:	2301      	movs	r3, #1
 80057c4:	4607      	mov	r7, r0
 80057c6:	e7f0      	b.n	80057aa <_svfiprintf_r+0x182>
 80057c8:	ab03      	add	r3, sp, #12
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	4622      	mov	r2, r4
 80057ce:	4b11      	ldr	r3, [pc, #68]	; (8005814 <_svfiprintf_r+0x1ec>)
 80057d0:	a904      	add	r1, sp, #16
 80057d2:	4640      	mov	r0, r8
 80057d4:	f3af 8000 	nop.w
 80057d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057dc:	4681      	mov	r9, r0
 80057de:	d1d6      	bne.n	800578e <_svfiprintf_r+0x166>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	065b      	lsls	r3, r3, #25
 80057e4:	f53f af35 	bmi.w	8005652 <_svfiprintf_r+0x2a>
 80057e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057ea:	b01d      	add	sp, #116	; 0x74
 80057ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f0:	ab03      	add	r3, sp, #12
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	4622      	mov	r2, r4
 80057f6:	4b07      	ldr	r3, [pc, #28]	; (8005814 <_svfiprintf_r+0x1ec>)
 80057f8:	a904      	add	r1, sp, #16
 80057fa:	4640      	mov	r0, r8
 80057fc:	f000 f882 	bl	8005904 <_printf_i>
 8005800:	e7ea      	b.n	80057d8 <_svfiprintf_r+0x1b0>
 8005802:	bf00      	nop
 8005804:	08005d80 	.word	0x08005d80
 8005808:	08005d86 	.word	0x08005d86
 800580c:	08005d8a 	.word	0x08005d8a
 8005810:	00000000 	.word	0x00000000
 8005814:	08005575 	.word	0x08005575

08005818 <_printf_common>:
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	4691      	mov	r9, r2
 800581e:	461f      	mov	r7, r3
 8005820:	688a      	ldr	r2, [r1, #8]
 8005822:	690b      	ldr	r3, [r1, #16]
 8005824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005828:	4293      	cmp	r3, r2
 800582a:	bfb8      	it	lt
 800582c:	4613      	movlt	r3, r2
 800582e:	f8c9 3000 	str.w	r3, [r9]
 8005832:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005836:	4606      	mov	r6, r0
 8005838:	460c      	mov	r4, r1
 800583a:	b112      	cbz	r2, 8005842 <_printf_common+0x2a>
 800583c:	3301      	adds	r3, #1
 800583e:	f8c9 3000 	str.w	r3, [r9]
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	0699      	lsls	r1, r3, #26
 8005846:	bf42      	ittt	mi
 8005848:	f8d9 3000 	ldrmi.w	r3, [r9]
 800584c:	3302      	addmi	r3, #2
 800584e:	f8c9 3000 	strmi.w	r3, [r9]
 8005852:	6825      	ldr	r5, [r4, #0]
 8005854:	f015 0506 	ands.w	r5, r5, #6
 8005858:	d107      	bne.n	800586a <_printf_common+0x52>
 800585a:	f104 0a19 	add.w	sl, r4, #25
 800585e:	68e3      	ldr	r3, [r4, #12]
 8005860:	f8d9 2000 	ldr.w	r2, [r9]
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	42ab      	cmp	r3, r5
 8005868:	dc28      	bgt.n	80058bc <_printf_common+0xa4>
 800586a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	3300      	adds	r3, #0
 8005872:	bf18      	it	ne
 8005874:	2301      	movne	r3, #1
 8005876:	0692      	lsls	r2, r2, #26
 8005878:	d42d      	bmi.n	80058d6 <_printf_common+0xbe>
 800587a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800587e:	4639      	mov	r1, r7
 8005880:	4630      	mov	r0, r6
 8005882:	47c0      	blx	r8
 8005884:	3001      	adds	r0, #1
 8005886:	d020      	beq.n	80058ca <_printf_common+0xb2>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	68e5      	ldr	r5, [r4, #12]
 800588c:	f8d9 2000 	ldr.w	r2, [r9]
 8005890:	f003 0306 	and.w	r3, r3, #6
 8005894:	2b04      	cmp	r3, #4
 8005896:	bf08      	it	eq
 8005898:	1aad      	subeq	r5, r5, r2
 800589a:	68a3      	ldr	r3, [r4, #8]
 800589c:	6922      	ldr	r2, [r4, #16]
 800589e:	bf0c      	ite	eq
 80058a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a4:	2500      	movne	r5, #0
 80058a6:	4293      	cmp	r3, r2
 80058a8:	bfc4      	itt	gt
 80058aa:	1a9b      	subgt	r3, r3, r2
 80058ac:	18ed      	addgt	r5, r5, r3
 80058ae:	f04f 0900 	mov.w	r9, #0
 80058b2:	341a      	adds	r4, #26
 80058b4:	454d      	cmp	r5, r9
 80058b6:	d11a      	bne.n	80058ee <_printf_common+0xd6>
 80058b8:	2000      	movs	r0, #0
 80058ba:	e008      	b.n	80058ce <_printf_common+0xb6>
 80058bc:	2301      	movs	r3, #1
 80058be:	4652      	mov	r2, sl
 80058c0:	4639      	mov	r1, r7
 80058c2:	4630      	mov	r0, r6
 80058c4:	47c0      	blx	r8
 80058c6:	3001      	adds	r0, #1
 80058c8:	d103      	bne.n	80058d2 <_printf_common+0xba>
 80058ca:	f04f 30ff 	mov.w	r0, #4294967295
 80058ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d2:	3501      	adds	r5, #1
 80058d4:	e7c3      	b.n	800585e <_printf_common+0x46>
 80058d6:	18e1      	adds	r1, r4, r3
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	2030      	movs	r0, #48	; 0x30
 80058dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058e0:	4422      	add	r2, r4
 80058e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058ea:	3302      	adds	r3, #2
 80058ec:	e7c5      	b.n	800587a <_printf_common+0x62>
 80058ee:	2301      	movs	r3, #1
 80058f0:	4622      	mov	r2, r4
 80058f2:	4639      	mov	r1, r7
 80058f4:	4630      	mov	r0, r6
 80058f6:	47c0      	blx	r8
 80058f8:	3001      	adds	r0, #1
 80058fa:	d0e6      	beq.n	80058ca <_printf_common+0xb2>
 80058fc:	f109 0901 	add.w	r9, r9, #1
 8005900:	e7d8      	b.n	80058b4 <_printf_common+0x9c>
	...

08005904 <_printf_i>:
 8005904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005908:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800590c:	460c      	mov	r4, r1
 800590e:	7e09      	ldrb	r1, [r1, #24]
 8005910:	b085      	sub	sp, #20
 8005912:	296e      	cmp	r1, #110	; 0x6e
 8005914:	4617      	mov	r7, r2
 8005916:	4606      	mov	r6, r0
 8005918:	4698      	mov	r8, r3
 800591a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800591c:	f000 80b3 	beq.w	8005a86 <_printf_i+0x182>
 8005920:	d822      	bhi.n	8005968 <_printf_i+0x64>
 8005922:	2963      	cmp	r1, #99	; 0x63
 8005924:	d036      	beq.n	8005994 <_printf_i+0x90>
 8005926:	d80a      	bhi.n	800593e <_printf_i+0x3a>
 8005928:	2900      	cmp	r1, #0
 800592a:	f000 80b9 	beq.w	8005aa0 <_printf_i+0x19c>
 800592e:	2958      	cmp	r1, #88	; 0x58
 8005930:	f000 8083 	beq.w	8005a3a <_printf_i+0x136>
 8005934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005938:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800593c:	e032      	b.n	80059a4 <_printf_i+0xa0>
 800593e:	2964      	cmp	r1, #100	; 0x64
 8005940:	d001      	beq.n	8005946 <_printf_i+0x42>
 8005942:	2969      	cmp	r1, #105	; 0x69
 8005944:	d1f6      	bne.n	8005934 <_printf_i+0x30>
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	6813      	ldr	r3, [r2, #0]
 800594a:	0605      	lsls	r5, r0, #24
 800594c:	f103 0104 	add.w	r1, r3, #4
 8005950:	d52a      	bpl.n	80059a8 <_printf_i+0xa4>
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6011      	str	r1, [r2, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	da03      	bge.n	8005962 <_printf_i+0x5e>
 800595a:	222d      	movs	r2, #45	; 0x2d
 800595c:	425b      	negs	r3, r3
 800595e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005962:	486f      	ldr	r0, [pc, #444]	; (8005b20 <_printf_i+0x21c>)
 8005964:	220a      	movs	r2, #10
 8005966:	e039      	b.n	80059dc <_printf_i+0xd8>
 8005968:	2973      	cmp	r1, #115	; 0x73
 800596a:	f000 809d 	beq.w	8005aa8 <_printf_i+0x1a4>
 800596e:	d808      	bhi.n	8005982 <_printf_i+0x7e>
 8005970:	296f      	cmp	r1, #111	; 0x6f
 8005972:	d020      	beq.n	80059b6 <_printf_i+0xb2>
 8005974:	2970      	cmp	r1, #112	; 0x70
 8005976:	d1dd      	bne.n	8005934 <_printf_i+0x30>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	f043 0320 	orr.w	r3, r3, #32
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	e003      	b.n	800598a <_printf_i+0x86>
 8005982:	2975      	cmp	r1, #117	; 0x75
 8005984:	d017      	beq.n	80059b6 <_printf_i+0xb2>
 8005986:	2978      	cmp	r1, #120	; 0x78
 8005988:	d1d4      	bne.n	8005934 <_printf_i+0x30>
 800598a:	2378      	movs	r3, #120	; 0x78
 800598c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005990:	4864      	ldr	r0, [pc, #400]	; (8005b24 <_printf_i+0x220>)
 8005992:	e055      	b.n	8005a40 <_printf_i+0x13c>
 8005994:	6813      	ldr	r3, [r2, #0]
 8005996:	1d19      	adds	r1, r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6011      	str	r1, [r2, #0]
 800599c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059a4:	2301      	movs	r3, #1
 80059a6:	e08c      	b.n	8005ac2 <_printf_i+0x1be>
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6011      	str	r1, [r2, #0]
 80059ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059b0:	bf18      	it	ne
 80059b2:	b21b      	sxthne	r3, r3
 80059b4:	e7cf      	b.n	8005956 <_printf_i+0x52>
 80059b6:	6813      	ldr	r3, [r2, #0]
 80059b8:	6825      	ldr	r5, [r4, #0]
 80059ba:	1d18      	adds	r0, r3, #4
 80059bc:	6010      	str	r0, [r2, #0]
 80059be:	0628      	lsls	r0, r5, #24
 80059c0:	d501      	bpl.n	80059c6 <_printf_i+0xc2>
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	e002      	b.n	80059cc <_printf_i+0xc8>
 80059c6:	0668      	lsls	r0, r5, #25
 80059c8:	d5fb      	bpl.n	80059c2 <_printf_i+0xbe>
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	4854      	ldr	r0, [pc, #336]	; (8005b20 <_printf_i+0x21c>)
 80059ce:	296f      	cmp	r1, #111	; 0x6f
 80059d0:	bf14      	ite	ne
 80059d2:	220a      	movne	r2, #10
 80059d4:	2208      	moveq	r2, #8
 80059d6:	2100      	movs	r1, #0
 80059d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059dc:	6865      	ldr	r5, [r4, #4]
 80059de:	60a5      	str	r5, [r4, #8]
 80059e0:	2d00      	cmp	r5, #0
 80059e2:	f2c0 8095 	blt.w	8005b10 <_printf_i+0x20c>
 80059e6:	6821      	ldr	r1, [r4, #0]
 80059e8:	f021 0104 	bic.w	r1, r1, #4
 80059ec:	6021      	str	r1, [r4, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d13d      	bne.n	8005a6e <_printf_i+0x16a>
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	f040 808e 	bne.w	8005b14 <_printf_i+0x210>
 80059f8:	4665      	mov	r5, ip
 80059fa:	2a08      	cmp	r2, #8
 80059fc:	d10b      	bne.n	8005a16 <_printf_i+0x112>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	07db      	lsls	r3, r3, #31
 8005a02:	d508      	bpl.n	8005a16 <_printf_i+0x112>
 8005a04:	6923      	ldr	r3, [r4, #16]
 8005a06:	6862      	ldr	r2, [r4, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	bfde      	ittt	le
 8005a0c:	2330      	movle	r3, #48	; 0x30
 8005a0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a16:	ebac 0305 	sub.w	r3, ip, r5
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	f8cd 8000 	str.w	r8, [sp]
 8005a20:	463b      	mov	r3, r7
 8005a22:	aa03      	add	r2, sp, #12
 8005a24:	4621      	mov	r1, r4
 8005a26:	4630      	mov	r0, r6
 8005a28:	f7ff fef6 	bl	8005818 <_printf_common>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d14d      	bne.n	8005acc <_printf_i+0x1c8>
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295
 8005a34:	b005      	add	sp, #20
 8005a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a3a:	4839      	ldr	r0, [pc, #228]	; (8005b20 <_printf_i+0x21c>)
 8005a3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a40:	6813      	ldr	r3, [r2, #0]
 8005a42:	6821      	ldr	r1, [r4, #0]
 8005a44:	1d1d      	adds	r5, r3, #4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6015      	str	r5, [r2, #0]
 8005a4a:	060a      	lsls	r2, r1, #24
 8005a4c:	d50b      	bpl.n	8005a66 <_printf_i+0x162>
 8005a4e:	07ca      	lsls	r2, r1, #31
 8005a50:	bf44      	itt	mi
 8005a52:	f041 0120 	orrmi.w	r1, r1, #32
 8005a56:	6021      	strmi	r1, [r4, #0]
 8005a58:	b91b      	cbnz	r3, 8005a62 <_printf_i+0x15e>
 8005a5a:	6822      	ldr	r2, [r4, #0]
 8005a5c:	f022 0220 	bic.w	r2, r2, #32
 8005a60:	6022      	str	r2, [r4, #0]
 8005a62:	2210      	movs	r2, #16
 8005a64:	e7b7      	b.n	80059d6 <_printf_i+0xd2>
 8005a66:	064d      	lsls	r5, r1, #25
 8005a68:	bf48      	it	mi
 8005a6a:	b29b      	uxthmi	r3, r3
 8005a6c:	e7ef      	b.n	8005a4e <_printf_i+0x14a>
 8005a6e:	4665      	mov	r5, ip
 8005a70:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a74:	fb02 3311 	mls	r3, r2, r1, r3
 8005a78:	5cc3      	ldrb	r3, [r0, r3]
 8005a7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a7e:	460b      	mov	r3, r1
 8005a80:	2900      	cmp	r1, #0
 8005a82:	d1f5      	bne.n	8005a70 <_printf_i+0x16c>
 8005a84:	e7b9      	b.n	80059fa <_printf_i+0xf6>
 8005a86:	6813      	ldr	r3, [r2, #0]
 8005a88:	6825      	ldr	r5, [r4, #0]
 8005a8a:	6961      	ldr	r1, [r4, #20]
 8005a8c:	1d18      	adds	r0, r3, #4
 8005a8e:	6010      	str	r0, [r2, #0]
 8005a90:	0628      	lsls	r0, r5, #24
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	d501      	bpl.n	8005a9a <_printf_i+0x196>
 8005a96:	6019      	str	r1, [r3, #0]
 8005a98:	e002      	b.n	8005aa0 <_printf_i+0x19c>
 8005a9a:	066a      	lsls	r2, r5, #25
 8005a9c:	d5fb      	bpl.n	8005a96 <_printf_i+0x192>
 8005a9e:	8019      	strh	r1, [r3, #0]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6123      	str	r3, [r4, #16]
 8005aa4:	4665      	mov	r5, ip
 8005aa6:	e7b9      	b.n	8005a1c <_printf_i+0x118>
 8005aa8:	6813      	ldr	r3, [r2, #0]
 8005aaa:	1d19      	adds	r1, r3, #4
 8005aac:	6011      	str	r1, [r2, #0]
 8005aae:	681d      	ldr	r5, [r3, #0]
 8005ab0:	6862      	ldr	r2, [r4, #4]
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f7fa fb93 	bl	80001e0 <memchr>
 8005aba:	b108      	cbz	r0, 8005ac0 <_printf_i+0x1bc>
 8005abc:	1b40      	subs	r0, r0, r5
 8005abe:	6060      	str	r0, [r4, #4]
 8005ac0:	6863      	ldr	r3, [r4, #4]
 8005ac2:	6123      	str	r3, [r4, #16]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aca:	e7a7      	b.n	8005a1c <_printf_i+0x118>
 8005acc:	6923      	ldr	r3, [r4, #16]
 8005ace:	462a      	mov	r2, r5
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	47c0      	blx	r8
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d0aa      	beq.n	8005a30 <_printf_i+0x12c>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	079b      	lsls	r3, r3, #30
 8005ade:	d413      	bmi.n	8005b08 <_printf_i+0x204>
 8005ae0:	68e0      	ldr	r0, [r4, #12]
 8005ae2:	9b03      	ldr	r3, [sp, #12]
 8005ae4:	4298      	cmp	r0, r3
 8005ae6:	bfb8      	it	lt
 8005ae8:	4618      	movlt	r0, r3
 8005aea:	e7a3      	b.n	8005a34 <_printf_i+0x130>
 8005aec:	2301      	movs	r3, #1
 8005aee:	464a      	mov	r2, r9
 8005af0:	4639      	mov	r1, r7
 8005af2:	4630      	mov	r0, r6
 8005af4:	47c0      	blx	r8
 8005af6:	3001      	adds	r0, #1
 8005af8:	d09a      	beq.n	8005a30 <_printf_i+0x12c>
 8005afa:	3501      	adds	r5, #1
 8005afc:	68e3      	ldr	r3, [r4, #12]
 8005afe:	9a03      	ldr	r2, [sp, #12]
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	42ab      	cmp	r3, r5
 8005b04:	dcf2      	bgt.n	8005aec <_printf_i+0x1e8>
 8005b06:	e7eb      	b.n	8005ae0 <_printf_i+0x1dc>
 8005b08:	2500      	movs	r5, #0
 8005b0a:	f104 0919 	add.w	r9, r4, #25
 8005b0e:	e7f5      	b.n	8005afc <_printf_i+0x1f8>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1ac      	bne.n	8005a6e <_printf_i+0x16a>
 8005b14:	7803      	ldrb	r3, [r0, #0]
 8005b16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b1e:	e76c      	b.n	80059fa <_printf_i+0xf6>
 8005b20:	08005d91 	.word	0x08005d91
 8005b24:	08005da2 	.word	0x08005da2

08005b28 <memcpy>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	1e43      	subs	r3, r0, #1
 8005b2c:	440a      	add	r2, r1
 8005b2e:	4291      	cmp	r1, r2
 8005b30:	d100      	bne.n	8005b34 <memcpy+0xc>
 8005b32:	bd10      	pop	{r4, pc}
 8005b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b3c:	e7f7      	b.n	8005b2e <memcpy+0x6>

08005b3e <memmove>:
 8005b3e:	4288      	cmp	r0, r1
 8005b40:	b510      	push	{r4, lr}
 8005b42:	eb01 0302 	add.w	r3, r1, r2
 8005b46:	d807      	bhi.n	8005b58 <memmove+0x1a>
 8005b48:	1e42      	subs	r2, r0, #1
 8005b4a:	4299      	cmp	r1, r3
 8005b4c:	d00a      	beq.n	8005b64 <memmove+0x26>
 8005b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b52:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005b56:	e7f8      	b.n	8005b4a <memmove+0xc>
 8005b58:	4283      	cmp	r3, r0
 8005b5a:	d9f5      	bls.n	8005b48 <memmove+0xa>
 8005b5c:	1881      	adds	r1, r0, r2
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	42d3      	cmn	r3, r2
 8005b62:	d100      	bne.n	8005b66 <memmove+0x28>
 8005b64:	bd10      	pop	{r4, pc}
 8005b66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005b6e:	e7f7      	b.n	8005b60 <memmove+0x22>

08005b70 <_free_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	4605      	mov	r5, r0
 8005b74:	2900      	cmp	r1, #0
 8005b76:	d045      	beq.n	8005c04 <_free_r+0x94>
 8005b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b7c:	1f0c      	subs	r4, r1, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bfb8      	it	lt
 8005b82:	18e4      	addlt	r4, r4, r3
 8005b84:	f000 f8d2 	bl	8005d2c <__malloc_lock>
 8005b88:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <_free_r+0x98>)
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	4610      	mov	r0, r2
 8005b8e:	b933      	cbnz	r3, 8005b9e <_free_r+0x2e>
 8005b90:	6063      	str	r3, [r4, #4]
 8005b92:	6014      	str	r4, [r2, #0]
 8005b94:	4628      	mov	r0, r5
 8005b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b9a:	f000 b8c8 	b.w	8005d2e <__malloc_unlock>
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	d90c      	bls.n	8005bbc <_free_r+0x4c>
 8005ba2:	6821      	ldr	r1, [r4, #0]
 8005ba4:	1862      	adds	r2, r4, r1
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	bf04      	itt	eq
 8005baa:	681a      	ldreq	r2, [r3, #0]
 8005bac:	685b      	ldreq	r3, [r3, #4]
 8005bae:	6063      	str	r3, [r4, #4]
 8005bb0:	bf04      	itt	eq
 8005bb2:	1852      	addeq	r2, r2, r1
 8005bb4:	6022      	streq	r2, [r4, #0]
 8005bb6:	6004      	str	r4, [r0, #0]
 8005bb8:	e7ec      	b.n	8005b94 <_free_r+0x24>
 8005bba:	4613      	mov	r3, r2
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	b10a      	cbz	r2, 8005bc4 <_free_r+0x54>
 8005bc0:	42a2      	cmp	r2, r4
 8005bc2:	d9fa      	bls.n	8005bba <_free_r+0x4a>
 8005bc4:	6819      	ldr	r1, [r3, #0]
 8005bc6:	1858      	adds	r0, r3, r1
 8005bc8:	42a0      	cmp	r0, r4
 8005bca:	d10b      	bne.n	8005be4 <_free_r+0x74>
 8005bcc:	6820      	ldr	r0, [r4, #0]
 8005bce:	4401      	add	r1, r0
 8005bd0:	1858      	adds	r0, r3, r1
 8005bd2:	4282      	cmp	r2, r0
 8005bd4:	6019      	str	r1, [r3, #0]
 8005bd6:	d1dd      	bne.n	8005b94 <_free_r+0x24>
 8005bd8:	6810      	ldr	r0, [r2, #0]
 8005bda:	6852      	ldr	r2, [r2, #4]
 8005bdc:	605a      	str	r2, [r3, #4]
 8005bde:	4401      	add	r1, r0
 8005be0:	6019      	str	r1, [r3, #0]
 8005be2:	e7d7      	b.n	8005b94 <_free_r+0x24>
 8005be4:	d902      	bls.n	8005bec <_free_r+0x7c>
 8005be6:	230c      	movs	r3, #12
 8005be8:	602b      	str	r3, [r5, #0]
 8005bea:	e7d3      	b.n	8005b94 <_free_r+0x24>
 8005bec:	6820      	ldr	r0, [r4, #0]
 8005bee:	1821      	adds	r1, r4, r0
 8005bf0:	428a      	cmp	r2, r1
 8005bf2:	bf04      	itt	eq
 8005bf4:	6811      	ldreq	r1, [r2, #0]
 8005bf6:	6852      	ldreq	r2, [r2, #4]
 8005bf8:	6062      	str	r2, [r4, #4]
 8005bfa:	bf04      	itt	eq
 8005bfc:	1809      	addeq	r1, r1, r0
 8005bfe:	6021      	streq	r1, [r4, #0]
 8005c00:	605c      	str	r4, [r3, #4]
 8005c02:	e7c7      	b.n	8005b94 <_free_r+0x24>
 8005c04:	bd38      	pop	{r3, r4, r5, pc}
 8005c06:	bf00      	nop
 8005c08:	2000009c 	.word	0x2000009c

08005c0c <_malloc_r>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	1ccd      	adds	r5, r1, #3
 8005c10:	f025 0503 	bic.w	r5, r5, #3
 8005c14:	3508      	adds	r5, #8
 8005c16:	2d0c      	cmp	r5, #12
 8005c18:	bf38      	it	cc
 8005c1a:	250c      	movcc	r5, #12
 8005c1c:	2d00      	cmp	r5, #0
 8005c1e:	4606      	mov	r6, r0
 8005c20:	db01      	blt.n	8005c26 <_malloc_r+0x1a>
 8005c22:	42a9      	cmp	r1, r5
 8005c24:	d903      	bls.n	8005c2e <_malloc_r+0x22>
 8005c26:	230c      	movs	r3, #12
 8005c28:	6033      	str	r3, [r6, #0]
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	bd70      	pop	{r4, r5, r6, pc}
 8005c2e:	f000 f87d 	bl	8005d2c <__malloc_lock>
 8005c32:	4a21      	ldr	r2, [pc, #132]	; (8005cb8 <_malloc_r+0xac>)
 8005c34:	6814      	ldr	r4, [r2, #0]
 8005c36:	4621      	mov	r1, r4
 8005c38:	b991      	cbnz	r1, 8005c60 <_malloc_r+0x54>
 8005c3a:	4c20      	ldr	r4, [pc, #128]	; (8005cbc <_malloc_r+0xb0>)
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	b91b      	cbnz	r3, 8005c48 <_malloc_r+0x3c>
 8005c40:	4630      	mov	r0, r6
 8005c42:	f000 f863 	bl	8005d0c <_sbrk_r>
 8005c46:	6020      	str	r0, [r4, #0]
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f000 f85e 	bl	8005d0c <_sbrk_r>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d124      	bne.n	8005c9e <_malloc_r+0x92>
 8005c54:	230c      	movs	r3, #12
 8005c56:	6033      	str	r3, [r6, #0]
 8005c58:	4630      	mov	r0, r6
 8005c5a:	f000 f868 	bl	8005d2e <__malloc_unlock>
 8005c5e:	e7e4      	b.n	8005c2a <_malloc_r+0x1e>
 8005c60:	680b      	ldr	r3, [r1, #0]
 8005c62:	1b5b      	subs	r3, r3, r5
 8005c64:	d418      	bmi.n	8005c98 <_malloc_r+0x8c>
 8005c66:	2b0b      	cmp	r3, #11
 8005c68:	d90f      	bls.n	8005c8a <_malloc_r+0x7e>
 8005c6a:	600b      	str	r3, [r1, #0]
 8005c6c:	50cd      	str	r5, [r1, r3]
 8005c6e:	18cc      	adds	r4, r1, r3
 8005c70:	4630      	mov	r0, r6
 8005c72:	f000 f85c 	bl	8005d2e <__malloc_unlock>
 8005c76:	f104 000b 	add.w	r0, r4, #11
 8005c7a:	1d23      	adds	r3, r4, #4
 8005c7c:	f020 0007 	bic.w	r0, r0, #7
 8005c80:	1ac3      	subs	r3, r0, r3
 8005c82:	d0d3      	beq.n	8005c2c <_malloc_r+0x20>
 8005c84:	425a      	negs	r2, r3
 8005c86:	50e2      	str	r2, [r4, r3]
 8005c88:	e7d0      	b.n	8005c2c <_malloc_r+0x20>
 8005c8a:	428c      	cmp	r4, r1
 8005c8c:	684b      	ldr	r3, [r1, #4]
 8005c8e:	bf16      	itet	ne
 8005c90:	6063      	strne	r3, [r4, #4]
 8005c92:	6013      	streq	r3, [r2, #0]
 8005c94:	460c      	movne	r4, r1
 8005c96:	e7eb      	b.n	8005c70 <_malloc_r+0x64>
 8005c98:	460c      	mov	r4, r1
 8005c9a:	6849      	ldr	r1, [r1, #4]
 8005c9c:	e7cc      	b.n	8005c38 <_malloc_r+0x2c>
 8005c9e:	1cc4      	adds	r4, r0, #3
 8005ca0:	f024 0403 	bic.w	r4, r4, #3
 8005ca4:	42a0      	cmp	r0, r4
 8005ca6:	d005      	beq.n	8005cb4 <_malloc_r+0xa8>
 8005ca8:	1a21      	subs	r1, r4, r0
 8005caa:	4630      	mov	r0, r6
 8005cac:	f000 f82e 	bl	8005d0c <_sbrk_r>
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d0cf      	beq.n	8005c54 <_malloc_r+0x48>
 8005cb4:	6025      	str	r5, [r4, #0]
 8005cb6:	e7db      	b.n	8005c70 <_malloc_r+0x64>
 8005cb8:	2000009c 	.word	0x2000009c
 8005cbc:	200000a0 	.word	0x200000a0

08005cc0 <_realloc_r>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	4607      	mov	r7, r0
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	460e      	mov	r6, r1
 8005cc8:	b921      	cbnz	r1, 8005cd4 <_realloc_r+0x14>
 8005cca:	4611      	mov	r1, r2
 8005ccc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cd0:	f7ff bf9c 	b.w	8005c0c <_malloc_r>
 8005cd4:	b922      	cbnz	r2, 8005ce0 <_realloc_r+0x20>
 8005cd6:	f7ff ff4b 	bl	8005b70 <_free_r>
 8005cda:	4625      	mov	r5, r4
 8005cdc:	4628      	mov	r0, r5
 8005cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce0:	f000 f826 	bl	8005d30 <_malloc_usable_size_r>
 8005ce4:	42a0      	cmp	r0, r4
 8005ce6:	d20f      	bcs.n	8005d08 <_realloc_r+0x48>
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4638      	mov	r0, r7
 8005cec:	f7ff ff8e 	bl	8005c0c <_malloc_r>
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	2800      	cmp	r0, #0
 8005cf4:	d0f2      	beq.n	8005cdc <_realloc_r+0x1c>
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	f7ff ff15 	bl	8005b28 <memcpy>
 8005cfe:	4631      	mov	r1, r6
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff ff35 	bl	8005b70 <_free_r>
 8005d06:	e7e9      	b.n	8005cdc <_realloc_r+0x1c>
 8005d08:	4635      	mov	r5, r6
 8005d0a:	e7e7      	b.n	8005cdc <_realloc_r+0x1c>

08005d0c <_sbrk_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4c06      	ldr	r4, [pc, #24]	; (8005d28 <_sbrk_r+0x1c>)
 8005d10:	2300      	movs	r3, #0
 8005d12:	4605      	mov	r5, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	6023      	str	r3, [r4, #0]
 8005d18:	f7fb f990 	bl	800103c <_sbrk>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_sbrk_r+0x1a>
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_sbrk_r+0x1a>
 8005d24:	602b      	str	r3, [r5, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	200005f0 	.word	0x200005f0

08005d2c <__malloc_lock>:
 8005d2c:	4770      	bx	lr

08005d2e <__malloc_unlock>:
 8005d2e:	4770      	bx	lr

08005d30 <_malloc_usable_size_r>:
 8005d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d34:	1f18      	subs	r0, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bfbc      	itt	lt
 8005d3a:	580b      	ldrlt	r3, [r1, r0]
 8005d3c:	18c0      	addlt	r0, r0, r3
 8005d3e:	4770      	bx	lr

08005d40 <_init>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	bf00      	nop
 8005d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d46:	bc08      	pop	{r3}
 8005d48:	469e      	mov	lr, r3
 8005d4a:	4770      	bx	lr

08005d4c <_fini>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr
